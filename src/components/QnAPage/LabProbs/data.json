{
    "initialBasics": [
        {
            "type": "lab",
            "subtopics":[
                { 
                    "subtopicName":"subtopic13567",
            "Elements": [
                {
                    "Question":"Compute the angles in degree of a triangle given its coordinates of its three vertices (to be read).\nThe angles formed at vertices should be printed in the same order of the vertices describing the triangle.\r\nInput data set (coordinates of three vertices of a triangle)\r\n\r\n(i) (10,5), (-5,3), (2,2)\r\n(ii) (1,2), (5,5), (7,6.5)\r\n(iii) (0,0,), (5,0), (2.5, 5)\r\n",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    \/\/ points are (x1,y1),(x2,y2),(x3,y3)\r\n    double x1, x2, x3;\r\n    double y1, y2, y3;\r\n    scanf(\"%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&x3,&y3);\r\n\r\n    double m1, m2;\r\n    m1 =(y2-y1)\/(x2-x1);\r\n    m2 =(y3-y2)\/(x3-x2);\r\n\r\n    \/\/condition of collinearity; if the three points lie on a straight line\r\n\r\n    if(m1==m2){\r\n        printf(\"Triangle coud not be formed; the points are collinear\\n\\n\\n\");\r\n        return 0;\r\n    }\r\n\r\n    double a, b, c;\r\n    \/\/length of the side opposite to pint (x1,y1) is a\r\n    \/\/length of the side opposite to pint (x2,y2) is b\r\n    \/\/length of the side opposite to pint (x3,y3) is c\r\n\r\n    a=sqrt( (x3-x2)*(x3-x2)+(y3-y2)*(y3-y2));\r\n    b=sqrt( (x1-x3)*(x1-x3)+(y1-y3)*(y1-y3));\r\n    c=sqrt( (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\r\n\r\n\r\n    double A, B, C;  \/\/ angle of the triangle are A, B, c\r\n    A =acos((b*b+c*c-a*a)\/(2*b*c));\r\n    B =acos((a*a+c*c-b*b)\/(2*a*c));\r\n    C =acos((a*a+b*b-c*c)\/(2*a*b));\r\n\r\n    \/\/ Angles A, B, and C calculated are in radians\r\n    \/\/ 1 radian =57.295779 degrees\r\n\r\n    const double degree= 57.295779;\r\n\r\n    printf(\"%lf degrees\\n\",A*degree);\r\n    printf(\"%lf degrees\\n\",B*degree);\r\n    printf(\"%lf degrees\\n\\n\\n\",C*degree);\r\n\r\n    return 0;\r\n\r\n}\r\n"
                },
                {
                    "Question":"Compute the equivalent energy in Joule of a mass M (to be read) in gram (gm) using Einstein\u2019s mass energy equation.\r\nInput data set:\r\n(i) M=2\r\n(ii) M= 4.56\r\n",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    double M;\r\n    scanf(\"%lf\",&M);\r\n    const long double c=3*100000000;\r\n    \/\/ c= speed of light; c=3*10^8m\/sec\r\n    double Energy;\r\n    M=M*0.001;\r\n    \/\/E=Mc^2\r\n    Energy=M*c*c;\r\n    printf(\"energy= %lf\\n\",Energy);\r\n}\r\n"
                },
                {
                    "Question": "Read two degree 2 polynomials f and g of the form:\r\nf(x) = a0 + a1x + a2x^2\r\ng(x) = b0 + b1x + b2x^2,\r\nwhere all the coefficients are integer modulo prime p = 59. Add f(x) and g(x) to compute another degree two polynomial h(x).\nPrint f(x), g(x) and h(x) using coefficient representation.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/\/ PART1: Take input for f(x) and g(x) and add f(x) and g(x) to compute another degree two polynomial h(x).\r\n    \r\n    \/\/ Input for f(x)\r\n    int a, b, c, d, e, f, p = 59;\r\n    printf(\"Give coefficients for f(x)\\n\");\r\n    printf(\"constant term = \");\r\n    scanf(\"%d\", &a);\r\n    printf(\"coeff of x = \");\r\n    scanf(\"%d\", &b);\r\n    printf(\"coeff of x^2 = \");\r\n    scanf(\"%d\", &c);\r\n    int a0 = a%p, a1 = b%p, a2 = c%p;\r\n    \/\/ Input for g(x)\r\n    printf(\"Give coefficients for g(x)\\n\");\r\n    printf(\"constant term = \");\r\n    scanf(\"%d\", &d);\r\n    printf(\"coeff of x = \");\r\n    scanf(\"%d\", &e);\r\n    printf(\"coeff of x^2 = \");\r\n    scanf(\"%d\", &f);\r\n    int b0 = d%p, b1 = e%p, b2 = f%p;\r\n    \/\/ Adding f(x) and g(x)\r\n    int c0, c1, c2;\r\n    c0 = (a0 + b0)%p, c1 = (a1 + b1)%p, c2 = (a2 + b2)%p;\r\n    \/\/ Printing f(x), h(x) and g(x)\r\n    printf(\"Printing the functions\\n\");\r\n    printf(\"f(x) = %d + %d(x) + %d(x^2)\\n\", a0, a1, a2);\r\n    printf(\"g(x) = %d + %d(x) + %d(x^2)\\n\", b0, b1, b2);\r\n    printf(\"h(x) = %d + %d(x) + %d(x^2)\\n\", c0, c1, c2);\r\n}\r\n"
                },
                {
                    "Question": "Consider the polynomials f(x) and g(x) from the first part of the assignment.\nRead 3 unique integers modulo p and evaluate f(x) and g(x) on those points. \nIf 3 integers are not unique print an error message and exit.\nLet {\u03B11, \u03B12, \u03B13} are those points, then the evaluation should give us {f(\u03B11), f(\u03B12), f(\u03B13)} and {g(\u03B11), g(\u03B12), g(\u03B13)}.\nAdd them point-wise to obtain:\r\n{f(\u03B11) + g(\u03B11), f(\u03B12) + g(\u03B12), f(\u03B13) + g(\u03B13)}.\r\n\r\nDefine polynomial m(x) in the point-value representation as:\r\n{{\u03B11, m(\u03B11)}, {\u03B12, m(\u03B12)}, {\u03B13, m(\u03B13)}}\r\n:= {{\u03B11, f(\u03B11) + g(\u03B11)}, {\u03B12, f(\u03B12) + g(\u03B12)}, {\u03B13, f(\u03B13) + g(\u03B13)}}.\r\n\r\nPrint f(x), g(x) and m(x) using point-value representation.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n    \/\/ Input of points\r\n    int p1, p2, p3;\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s1 = \");\r\n    scanf(\"%d\", &p1);\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s2 = \");\r\n    scanf(\"%d\", &p2);\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s3 = \");\r\n    scanf(\"%d\", &p3);\r\n    int s1 = p1%p, s2 = p2%p, s3 = p3%p;\r\n    \/\/ Evaluating values\r\n    int x;\r\n    x = s1;\r\n    int fs1 = (a0) + (a1*x) + (a2*x*x);\r\n    x = s2;\r\n    int fs2 = (a0) + (a1*x) + (a2*x*x);\r\n    x = s3;\r\n    int fs3 = (a0) + (a1*x) + (a2*x*x);\r\n\r\n    x = s1;\r\n    int gs1 = (b0) + (b1*x) + (b2*x*x);\r\n    x = s2;\r\n    int gs2 = (b0) + (b1*x) + (b2*x*x);\r\n    x = s3;\r\n    int gs3 = (b0) + (b1*x) + (b2*x*x);\r\n\r\n    int ms1 = (fs1 + gs1)%p;\r\n    int ms2 = (fs2 + gs2)%p;\r\n    int ms3 = (fs3 + gs3)%p;\r\n\r\n    printf(\"Point-value represntations\\n\");\r\n    printf(\"{{s1, f(s1)}, {s2, f(s2)}, {s3, f(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, fs1, s2, fs2, s3, fs3);\r\n    printf(\"{{s1, g(s1)}, {s2, g(s2)}, {s3, g(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, gs1, s2, gs2, s3, gs3);\r\n    printf(\"{{s1, m(s1)}, {s2, m(s2)}, {s3, m(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, ms1, s2, ms2, s3, ms3);\r\n    }\r\n"
                },
                {
                    "Question": "Here we will check equivalence between coefficient representation and point-value representation of a polynomial.\nConsider {{\u03B11, m(\u03B11)}, {\u03B12, m(\u03B12)}, {\u03B13, m(\u03B13)}} from the second part of the assignment.\nCompute the polynomial m(x) in coefficient representation from the point-value representation\n(Use the Lagrange interpolation for this purpose).\nPrint m(x) and h(x) in coefficient representation to check whether they are equivalent. If they are not equivalent print an error mes-\r\nsage.\r\nLagrange Interpolation: Consider a degree two polynomial f(x). Let {{\u03B11, f(\u03B11)}, {\u03B12, f(\u03B12)}, {\u03B13, f(\u03B13)}}\r\nbe one point value representation of f(x). Then we can write f(x) as:\r\nf(x) = f(\u03B11) \u00B7[(x \u2212 \u03B12)(x \u2212 \u03B13)]\/[(\u03B11 \u2212 \u03B12)(\u03B11 \u2212 \u03B13)]+ f(\u03B12) \u00B7[(x \u2212 \u03B11)(x \u2212 \u03B13)]\/[(\u03B12 \u2212 \u03B11)(\u03B12 \u2212 \u03B13)] + f(\u03B13) \u00B7[(x \u2212 \u03B11)(x \u2212 \u03B12)]\/[(\u03B13 \u2212 \u03B11)(\u03B13 \u2212 \u03B12)]\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n    int m0, m1, m2;\r\n    int den;\r\n\r\n    printf(\"Enter the integral value of modulo inverse[(data*inverse)%%p = 1: this inverse] of (s1-s2)(s2 - s3)(s1 - s3): \");\r\n    \r\n    scanf(\"%d\", &den);\r\n\r\n    m0 = (p + (((ms1*(s2 - s3)*s2*s3 - ms2*(s1 - s3)*s1*s3 + ms3*(s1 - s2)*s1*s2)%p)*(den))%p)%p;\r\n    m1 = (p + (((- ms1*(s2 - s3)*(s2 + s3) + ms2*(s1 - s3)*(s1 + s3) - ms3*(s1 - s2)*(s1 + s2)))%p*(den))%p)%p;\r\n    m2 = (p + (((ms1*(s2 - s3) - ms2*(s1 - s3) + ms3*(s1 - s2))%p)*(den))%p)%p;\r\n\r\n\r\n    printf(\"m(x) = %d + %d(x) + %d(x^2)\\n\", m0, m1, m2);\r\n    printf(\"h(x) = %d + %d(x) + %d(x^2)\\n\", c0, c1, c2);\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"Read three numbers and return sum of their first and second maximum.\r\nInput data set\r\n(i) 4.8, -3.0, 2.9\r\n(ii) 7.8, 81.0, -4.0\r\n(iii) 4.0, 5.0, 6.0\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n    double a, b, c;\r\n    scanf(\"%lf%lf%lf\",&a,&b,&c);\r\n    double total, sum;\r\n    total = a+b+c;\r\n    double min=a;\r\n    if(a>b){\r\n        min=b;\r\n        if(b>c)\r\n            min=c;\r\n    }\r\n    else if(a>c){\r\n        min=c;\r\n    }\r\n    sum=total-min;\r\n    printf(\"sum: %lf\\n\",sum);\r\n\r\n}\r\n"
                },
                
                {
                    "Question": "Read the side of a square (an integer value) and print the area of the largest circle enclosed inside the square. The area will be a real number.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int side;\r\n    float pi=3.14;\r\n    float area;\r\n    printf(\"Enter side of square : \");\r\n    scanf(\"%d\",&side);\r\n    area = pi*((side*side)\/4.0);\r\n    printf(\"Area of largest circle inside square of side length %d is : %f\",side,area);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read a single input as character.\r\n    a. Then check if the input is a numeral or character\r\n    b. In case of character report whether it is upper case or lower case\r\n    c. If it is lowercase then report if it is vowel or constant\r\nUse switch case to perform above-mentioned conditional operations.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    char a;\r\n    printf(\"Enter any character :\");\r\n    scanf(\"%c\",&a);\r\n    switch(a)\r\n    {\r\n        case '0' ... '9':\r\n            {\r\n                printf(\"Numeral\");\r\n                break;\r\n            }\r\n        case 'A' ... 'Z':\r\n            {\r\n                printf(\"Uppercase character\");\r\n                break;\r\n            }\r\n        case 'a' ... 'z':\r\n            {\r\n                if(a=='a'||a=='e'||a=='i'||a=='o'||a=='u')\r\n                    printf(\"Vowel lowercase\");\r\n                else\r\n                    printf(\"Consonant lowercase\");\r\n                break;\r\n            }\r\n    }\r\n    return 0;\r\n}"
                }]},
                {"subtopicName":"subtopic2",
            "Elements": [
                {
                    "Question": "Read the date of birth of a person as a\nsix digit integer with the format mmyyyy.\nAssume the user entered a valid date. Write a C program that can compute the age as of today (042022).\nMention month and the year.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int dob,diffm,diffyr;\r\n    int year;\r\n    int month;\r\n    printf(\"Enter date as mmyyyy :\");\r\n    scanf(\"%d\",&dob);\r\n    int thismonth=04;\r\n    int thisyear=2022;\r\n    year=(dob%10000);\r\n    month=(dob\/10000);\r\n    if(thismonth>=month)\r\n    {\r\n        diffm=thismonth-month;\r\n        diffyr=thisyear-year;\r\n    }\r\n    else\r\n    {\r\n        diffm=(12-month)+thismonth;\r\n        diffyr=thisyear-year-1;\r\n    }\r\n    printf(\"Age of person is %d years and %d months\",diffyr,diffm);\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "Submit one (single) C program.\r\n    Write a C program to perform the following tasks. \r\n    1. Take as input the first 2 digits of your roll number. Let this number be a. \r\n    2. Next, take as input the next 2 characters of your roll number. \r\n    3. Then take as input the last 5 digits of your roll number. Let this number be b. \r\n    4. Print \"Hello\" followed by your full roll number. Eg. Hello 21CS10001. \r\n    5. Compute y = 1.234x105 +7.5x10-\u00B3 + b. \r\n    6. Print y. \r\n    7. Compute z = a+++ -b + b-. \r\n    8. Print a,b,z at the end of the computations. \r\n\r\n\r\nYou may need to use math library function :\n#include imath.h \nIf you want to compile useing the terminal then use the command \ngcc.\/program.c-Im Proper commenting, indentation and output commands carry marks.",
                    "Answer" : "#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    int a,b;\r\n    long double y;\r\n    int z;\r\n    char c[3];\r\n    printf(\"Input first 2 digits : \");\r\n    scanf(\"%d\",&a);\/\/input first 2 digits\r\n    printf(\"Input next 2 characters :\");\r\n    scanf(\"%s\",c);\/\/input 2 character\r\n    printf(\"Input last 5 digits: \");\r\n    scanf(\"%d\",&b);\/\/input last 5 digits\r\n    printf(\"Hello %d%s%d\\n\",a,c,b);\/\/ output 1\r\n\r\n\r\n    y=1.234*(pow(10,5))+ 7.5*(pow(10,-3))+b;\/\/ the y function\r\n    printf(\"y=%Lf\\n\",y);\/\/printing y\r\n    z=(a++)+(--b)+(b--);\/\/ the z function\r\n    printf(\"z=%d\\n\",z);\/\/printing z\r\n    printf(\"a=%d, b=%d,z=%d\",a,b,z);\/\/ printing a,b and z as final output\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "1. Write a C program which takes as input the coordinates of the vertices of a triangle and does the following :\r\n    a. Print the area of the triangle \r\n    b. Print whether the triangle is acute, obtuse or right angle \r\n    c. Check whether the triangle is equilateral or isosceles and if so print the type \r\n\r\n2. Write a C program to assign the students to breakout rooms based on their roll numbers.\nRead n Roll nos and print the assignment of each them to rooms. Use switch statement. \r\n    a. If the student roll no ends in 0 or 1, assign the student to ERoom \r\n    b. If the student roll no ends in 2 or 3, assign the student to Droom \r\n    c. If the student roll no ends in 4 or 5, assign the student to TRoom \r\n    d. If the student roll no ends in 6 or 7, assign the student to Croom \r\n    e. If the student roll no ends in 8 or 9, assign the student to PRoom.",
                    "Answer" : "1.\r\n\r\n#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    \/\/ DEFINING VARIABLES\r\n    float x1,x2,x3,y1,y2,y3;\r\n    float s1,s2,s3,a,x,y,z;\r\n    \/\/ TAKING INPUT AS COORDINATES\r\n    printf(\"Input coordinate 1 : \");\r\n    scanf(\"%f %f\",&x1,&y1);\r\n\r\n    printf(\"Input coordinate 2 : \");\r\n    scanf(\"%f %f\",&x2,&y2);\r\n\r\n    printf(\"Input coordinate 3 : \");\r\n    scanf(\"%f %f\",&x3,&y3);\r\n    a=(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\/2;\r\n    if(a<0){\r\n    printf(\"Area is %f\\n\",a*(-1));}\r\n    else\r\n    {\r\n        printf(\"Area is %f\\n\",a);\r\n    }\r\n    \/\/ CALCULATING SIDE LENGTHS\r\n    s1=sqrt(((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1)));\r\n    s2=sqrt(((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2)));\r\n    s3=sqrt(((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1)));\r\n    \/\/CHECKING IF A TRIANGLE IS VALID OR NOT\r\n    if (s1==0 || s2==0 || s3==0 || a==0)\r\n    {\r\n        printf(\"It is not a valid triangle\");\r\n    }\r\n    else{\r\n        \/\/ EQUILATERAL \/ ISOSCELES\/ SCALENE CHECK\r\n    if(s1==s2 && s2==s3)\r\n    {\r\n        printf(\"Equilateral Triangle\\n\");\r\n    }\r\n    else if(s1==s2 || s2==s3 || s3==s1)\r\n    {\r\n        printf(\"Isosceles Triangles\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Scalene Triangle\\n\");\r\n    }\r\n    \/\/ ACUTE \/ OBTUSE\/ RIGHT ANGLE CHECK\r\n    x = ((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1));\r\n    y = ((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2));\r\n    z = ((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1));\r\n    if(s1>s2 && s1>s3) \/\/ LARGEST IS S1\r\n    {\r\n        if(x == y + z)\r\n            printf( \" Triangle is Right-angled\");\r\n        else if(x < y + z)\r\n            printf( \"Triangle is acute-angled\");\r\n        else\r\n            printf (\"Triangle is obtuse-angled\");\r\n\r\n    }\r\n\r\n    else if(s2>s1 && s2>s3) \/\/ LARGEST IS S2\r\n    {\r\n        if(y == x + z)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(y < x + z)\r\n            printf (\"Triangle is  acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }\r\n    else \/\/LARGEST IS S3\r\n    {\r\n        if(z == x + y)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(z < x + y)\r\n            printf(\"Triangle is acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }}\r\n\r\n}\r\n\r\n2.\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\n\/\/ DEFINE VARIABLES\r\n    int i, n;\r\n    int roll;\r\n    \/\/ NUMBER OF STUDENTS\r\n    printf(\"Enter Number of Students :\");\r\n    scanf(\"%d\", &n);\r\n\r\n    for (i = 1; i <= n; i++) {\r\n        printf(\"enter a roll number:\");\r\n        scanf(\"%d\", &roll);\r\n        int last = roll % 10;\/\/ TO FIND LAST DIGIT OF ROLL NUMBER\r\n        \/\/USING SWITCH TO FIND ROOM ALLOTED\r\n        switch (last) {\r\n            case 0: {\r\n                printf(\"ERoom\\n\");\r\n               continue;\r\n            }\r\n            case 1: {\r\n                printf(\"ERoom\\n\");\r\n                continue;\r\n            }\r\n\r\n            case 2: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 3: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 4: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 5: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 6: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 7: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 8 : {\r\n                printf(\"PRoom\\n\");\r\n                continue;\r\n\r\n            }\r\n            case 9: {\r\n                printf(\"PRoom\\n\");\r\n         continue;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}" 
                    
                },
                {
                    "Question":"Write a C program that prints your name and roll number in two consecutive lines.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main(){\r\n  printf(\"Name: Aritra Basu\\nRoll number: 17AG21015\\n\\n\");\r\n  return 0;\r\n}\r\n" 
                },
                {
                    "Question":"Write a C program that takes as input two integers a and b from the keyboard, computes a\/b\r\nand prints its value on the terminal.\r\n\uE00C The value of a\/b should be correct up to 6th decimal place.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int i;\r\n  float a, b, x;\r\n\r\n  \/\/Bullet 1\r\n\r\n  printf(\"Enter a: \");\r\n  scanf(\"%f\",&a);\r\n\r\n  \/\/Bullet 2\r\n  \r\n  printf(\"a=%0.4f\\n\", a);\r\n  b=a;\r\n\r\n  \/\/The next 4 lines raise b to its 16th power\r\n\r\n  b=b*b;\r\n  b=b*b;\r\n  b=b*b;\r\n  b=b*b;\r\n\r\n  \/\/Bullet 3\r\n\r\n  x=(1-b)\/(1-a);\r\n  printf(\"p(a)=%0.4f\\n\",x);\r\n\r\n  \/\/Bullet 4\r\n\r\n  x=(1-b)\/((1-a)*(1-a)) - 16*b\/(1-a);\r\n  printf(\"q(a)=%0.4f\\n\",x);\r\n  \r\n  \/\/Bullet 5\r\n\r\n  x=1\/(1-a);\r\n  printf(\"r(a)=%0.4f\\n\",x);\r\n  return 0;\r\n}"
                   
                },
                {
                    "Question":"Write a program that takes as input the value of a floating-point variable, say x , calculates the\r\nvalue of the expression 1+x+x^2 , and prints the result on the terminal correct up to 10th\r\ndecimal place.\r\n\uE00C Assume that the value of x is positive and less than 1.\r\n\uE00C You cannot use math library.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main(){\r\n  float x, y;\r\n  \r\n  printf(\"Enter x: \");\r\n  scanf(\"%f\", &x);\r\n  \r\n  y = 1 + x + x*x; \r\n  \r\n  printf(\"Answer = %12.10f\\n\", y); \r\n    \r\n  return 0;\r\n}\r\n"
                },
                {
                    "Question":"Write a C program that prints the following two patterns (a triangle and a Swastika) on the\r\nconsole. Your printed patterns should be exactly as the sample output. However, your number\r\nof newlines between the triangle and Swastika may differ from ours.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n\/\/Triangle\r\n\r\nprintf(\"    *    \\n   * *   \\n  *   *  \\n *     * \\n*********\\n\\n\\n\");\r\n\r\n\/\/Swastika\r\n\r\nprintf(\"**   *******\\n**   *******\\n**   **\\n**   **\\n************\\n************\\n     **   **\\n     **   **\\n     **   **\\n*******   **\\n*******   **\");\r\n\r\nreturn 0;\r\n\r\n}"
                },
                {
                    "Question":"User supplies a positive integer having value at most 9999. Your program should shift its\r\ndigits cyclically towards right, one digit at a time, and print the results on the terminal. This\r\nshould continue 4 times. The program should treat the input as a 4-digit number, by adding 0\r\nto its left if needed. The numbers printed should be right-justified. You should use as few\r\nvariables as possible.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int a;\r\n  printf(\"Enter a positive integer: \");\r\n  scanf(\"%d\",&a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a C program that does the following:\r\n\r\n\uE00C The program first takes in a 7- or 8-digit positive integer as input (that\u2019s ensured)\r\nthrough the keyboard that is to be interpreted as a date in dd-mm-yyyy format.\r\nExample: 22112001 stands for November 22, 2001 and 3011987 stands for January 3,\r\n1987. Note that the last 4 digits correspond to year, the next 2 digits correspond to\r\nmonth, and the next 1 or 2 digits correspond to day. Make sure that you use an integer\r\ntype that can accommodate any 8-digit integer. You may use the sizeof( ) function to\r\nfind out the sizes of various data types in your system.\r\n\uE00C Prints the numbers in the day, month, and year fields, each in a new line. [2]\r\n\uE00C If the year is before 2021 or after 2099, then the program prints an appropriate\r\nmessage and terminates. [1]\r\n\uE00C If the input integer does not correspond to any valid date (for example, 99092022,\r\n31062078, 29022023), then the program prints an explanatory error message and\r\nterminates. If there are multiple explanations of invalidity (for example, both day and\r\nmonth are out of their respective ranges), any one explanation can be printed. [2]\r\n\uE00C If the input integer corresponds to a valid date, and the year is between 2021 and 2099\r\n(both inclusive) then the program prints the month and the day (both in words) in a\r\nnew line. [1+4]\r\nYou may use the fact that January 1, 2021 is a Friday.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int date, month, year, isvalid=1, offset=0;\r\n\r\n  \/\/Bullet 1\r\n  \r\n  printf(\"Enter date: \");\r\n  scanf(\"%d\",&date);\r\n \r\n\/*In my system, size of int is 4 bytes. This is enough to hold any 8 digit integer.\r\n  If size of int is smaller in your system (eg. 2 bytes), you may need to use long int or long long int. *\/\r\n\r\n  year=date%10000;\r\n  date\/=10000;\r\n  month=date%100;\r\n  date\/=100;\r\n\r\n\/* Note that the variable date holds the value of day at this point. *\/\r\n\r\n  \/\/Bullet 2\r\n\r\n  printf(\"Day: %d\\nMonth: %d\\nYear: %d\\n\", date, month, year);\r\n\r\n  \/\/Bullet 3\r\n\r\n  if(year<2021)\r\n  {\r\n    printf(\"Before 2021\\n\");\r\n    return 0;\r\n  }\r\n  if(year>2099)\r\n  {\r\n    printf(\"After 2099\\n\");\r\n    return 0;\r\n  }\r\n\r\n  \/\/Bullet 4\r\n \r\n  if(month<1 || month>12)\r\n  {\r\n    printf(\"Month out of range.\\n\");\r\n    return 0;\r\n  }\r\n  if(date<1 || date > 31)\r\n  {\r\n    printf(\"Day out of range.\\n\");\r\n    return 0;\r\n  }\r\n  switch(month)\r\n  {\r\n    case 2: if(date>28+(!(year%4))) isvalid=0; break;\r\n    case 4: \r\n    case 6:\r\n    case 9:\r\n    case 11: if(date>30) isvalid=0;\r\n  }\r\n  if(!isvalid)\r\n  {\r\n    printf(\"Day out of range.\\n\");\r\n    return 0;\r\n  }\r\n\r\n  \/\/Bullet 5 \r\n\r\n  offset=(year-2021)*365+(year-2021)\/4;\r\n\r\n  switch(month)\r\n  {\r\n    case 12: offset+=30; \/\/Adding number of days in November. Similarly for other cases.\r\n    case 11: offset+=31;\r\n    case 10: offset+=30;\r\n    case 9: offset+=31;\r\n    case 8: offset+=31;\r\n    case 7: offset+=30;\r\n    case 6: offset+=31;\r\n    case 5: offset+=30;\r\n    case 4: offset+=31;\r\n    case 3: offset+=28+(!(year%4));\r\n    case 2: offset+=31;\r\n  }\r\n  \r\n  offset+=date-1;\r\n\r\n  switch(offset%7)\r\n  {\r\n    case 0: printf(\"It's a Friday of \"); break;\r\n    case 1: printf(\"It's a Saturday of \"); break;\r\n    case 2: printf(\"It's a Sunday of \"); break;\r\n    case 3: printf(\"It's a Monday of \"); break;\r\n    case 4: printf(\"It's a Tuesday of \"); break;\r\n    case 5: printf(\"It's a Wednesday of \"); break;\r\n    case 6: printf(\"It's a Thursday of \"); break;\r\n  }\r\n  \r\n  switch(month)\r\n  {\r\n    case 1: printf(\"January.\\n\"); break;\r\n    case 2: printf(\"February.\\n\"); break;\r\n    case 3: printf(\"March.\\n\"); break;\r\n    case 4: printf(\"April.\\n\"); break;\r\n    case 5: printf(\"May.\\n\"); break;\r\n    case 6: printf(\"June.\\n\"); break;\r\n    case 7: printf(\"July.\\n\"); break;\r\n    case 8: printf(\"August.\\n\"); break;\r\n    case 9: printf(\"September.\\n\"); break;\r\n    case 10: printf(\"October.\\n\"); break;\r\n    case 11: printf(\"November.\\n\"); break;\r\n    case 12: printf(\"December.\\n\"); break;\r\n  }\r\n\r\n   \r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a program that manages transactions in a snacks bar. The program should do the following:\r\n\r\n\uE00C The program first displays a header line:\r\nFollowing are 12 items and their rates (INR):\r\nThen it skips a line and prints a menu on the console, as shown below. [3]\r\n\uE00C Next, the program skips a line and prints:\r\nEnter the Serial Number (SN) of item and the quantity you want:\r\nThe user will enter two valid integers in response, the first being the SN and the second its\r\nquantity. [1]\r\n\uE00C After the user\u2019s input, the program displays the item name and the quantity requested. After\r\nthat, it computes the payable amount and displays the calculation. The basic price is the rate of\r\nthe item times the quantity. The tax is 12.5% of the basic price. The payable amount is the sum\r\nof the basic price and the tax, rounded to its nearest integer (e.g., 10.49 is rounded to 10, while\r\n10.50 or 10.60 is rounded to 11). Finally, the program prints a greeting. [6]\r\nEverything printed should exactly match the output given below, including alignments, justifications,\r\nprecision of the fractions, the horizontal lines, the greeting, etc. You may assume that the total amount\r\n(before rounding) is less than INR 9999.50.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int sn, q;\r\n  float basic_price, price;\r\n  printf(\"Following are 12 items and their rates (INR):\\n\\n\");\r\n  printf(\"SN      ITEM                 RATE\\n\");\r\n  printf(\"--      ----                 ----\\n\\n\");\r\n  printf(\"01:     BUTTER COOKIES       25\\n\");\r\n  printf(\"02:     CASHEW COOKIES       30\\n\");\r\n  printf(\"03:     CREAM CAKE           22\\n\");\r\n  printf(\"04:     LEMON JUICE          35\\n\");\r\n  printf(\"05:     VEG CASHEW CAKE      18\\n\");\r\n  printf(\"06:     MANGO JUICE          78\\n\");\r\n  printf(\"07:     COOKIES (PLAIN)      15\\n\");\r\n  printf(\"08:     ORANGE JUICE         73\\n\");\r\n  printf(\"09:     MILK BISCUITS        12\\n\");\r\n  printf(\"10:     PLAIN VEG CAKE       20\\n\");\r\n  printf(\"11:     BUTTER FRUIT CAKE    25\\n\");\r\n  printf(\"12:     PINEAPPLE JUICE      65\\n\\n\");\r\n  printf(\"Enter the Serial Number (SN) of item and the quantity you want: \");\r\n  scanf(\"%d%d\",&sn,&q);\r\n  printf(\"Your item is \");\r\n  switch(sn)\r\n  {\r\n    case 1: printf(\"BUTTER COOKIES x\"); basic_price=25.0; break;\r\n    case 2: printf(\"CASHEW COOKIES x\"); basic_price=30.0; break;\r\n    case 3: printf(\"CREAM CAKE x\"); basic_price=22.0; break;\r\n    case 4: printf(\"LEMON JUICE x\"); basic_price=35.0; break;\r\n    case 5: printf(\"VEG CASHEW CAKE x\"); basic_price=18.0; break;\r\n    case 6: printf(\"MANGO JUICE x\"); basic_price=78.0; break;\r\n    case 7: printf(\"COOKIES (PLAIN) x\"); basic_price=15.0; break;\r\n    case 8: printf(\"ORANGE JUICE x\"); basic_price=73.0; break;\r\n    case 9: printf(\"MILK BISCUITS x\"); basic_price=12.0; break;\r\n    case 10: printf(\"PLAIN VEG CAKE x\"); basic_price=20.0; break;\r\n    case 11: printf(\"BUTTER FRUIT CAKE x\"); basic_price=25.0; break;\r\n    case 12: printf(\"PINEAPPLE JUICE x\"); basic_price=65.0;\r\n  }\r\n  printf(\" %d\\n\", q);\r\n  printf(\"Basic price = Rs. %7.2f\\n\", basic_price*q);\r\n  printf(\"Tax @12.5%%  = Rs. %7.2f\\n\", basic_price*q*0.125);\r\n  printf(\"Total price = Rs. %7.2f\\n\", price=basic_price*q*1.125);\r\n\r\n  \/* We may have used basic_price itself in place of price. \r\n     However, in the interest of readability we preferred that \r\n     the variable basic_price be reserved for holding the basic price. *\/\r\n\r\n  printf(\"=========================\\n\");\r\n  printf(\"To pay      = Rs. %4d.00\", (int)(price+0.50));\r\n  printf(\"\\n=========================\");\r\n  printf(\"\\nThank you!\\nPlease visit us again.\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":" Assume that a class has 5 students. Read the Roll number (integer) and Marks out of (100) for the 5 students and display the data nicely formatted." ,
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int r1,r2,r3,r4,r5;\r\n    int s11,s21,s31,s41,s51;\r\n    int s12,s22,s32,s42,s52;\r\n    int s13,s23,s33,s43,s53;\r\n    int s14,s24,s34,s44,s54;\r\n    int s15,s25,s35,s45,s55;\r\n    printf(\"enter the roll no of student 1\\n\");\r\n    scanf(\"%d\\n\", &r1);\r\n    printf(\"enter the roll no of student 2\\n\");\r\n    scanf(\"%d\\n\", &r2);\r\n    printf(\"enter the roll no of student 3\\n\");\r\n    scanf(\"%d\\n\", &r3);\r\n    printf(\"enter the roll no of student 4\\n\");\r\n    scanf(\"%d\\n\", &r4);\r\n    printf(\"enter the roll no of student 5\\n\");\r\n    scanf(\"%d\\n\", &r5);\r\n    printf(\"enter the marks of student1 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s11);\r\n    printf(\"enter the marks of student1 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s21);\r\n    printf(\"enter the marks of student1 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s31);\r\n    printf(\"enter the marks of student1 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s41);\r\n    printf(\"enter the marks of student1 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s51);\r\n    printf(\"enter the marks of student2 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s12);\r\n    printf(\"enter the marks of student2 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s22);\r\n    printf(\"enter the marks of student2 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s32);\r\n    printf(\"enter the marks of student2 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s42);\r\n    printf(\"enter the marks of student2 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s52);\r\n    printf(\"enter the marks of student3 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s13);\r\n    printf(\"enter the marks of student3 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s23);\r\n    printf(\"enter the marks of student3 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s33);\r\n    printf(\"enter the marks of student3 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s43);\r\n    printf(\"enter the marks of student3 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s53);\r\n    printf(\"enter the marks of student4 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s14);\r\n    printf(\"enter the marks of student4 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s24);\r\n    printf(\"enter the marks of student4 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s34);\r\n    printf(\"enter the marks of student4 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s44);\r\n    printf(\"enter the marks of student4 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s54);\r\n    printf(\"enter the marks of student5 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s15);\r\n    printf(\"enter the marks of student5 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s25);\r\n    printf(\"enter the marks of student5 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s35);\r\n    printf(\"enter the marks of student5 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s45);\r\n    printf(\"enter the marks of student5 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s55);\r\n    printf(\"the tabulated form is____\\n\");\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r1,s11,s21,s31,s41,s51);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r2,s12,s22,s32,s42,s52);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r3,s13,s23,s33,s43,s53);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r4,s14,s24,s34,s44,s54);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r5,s15,s25,s35,s45,s55);\r\n    return 0;\r\n\r\n}"
                },
                {
                    "Question":"Assume that you are going to deposit a certain amount of money in bank fixed deposit.\r\nWnte a C program to read two integers a and b representing the amount being deposited\r\nand the period of deposit in years, respectively. Also, read a floating point number r\r\nindicating the yearly interest rate in percentage. Compute and display the total amount\r\npayable at the end of the deposit period assuming (a) Simple interest rate computed at\r\nthe end of the complete deposit period and (6) Yearly compound interest computation.",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    int a,b;\r\n    float r,si,ci;\r\n    printf(\"enter the principal amt.\\n\");\r\n    scanf(\"%d\", &a);\r\n    printf(\"enter the period of deposit in yrs\\n\");\r\n    scanf(\"%d\", &b);\r\n    printf(\"enter the interest rate in percentage\\n\");\r\n    scanf(\"%f\", &r);\r\n    si=(a*b*r)\/100.0;\r\n    ci= (pow((1+(0.01*r)),b)*a) - a;\r\n    printf(\"the simple interest is %f and compound interest is %f\", si,ci);\r\n    return 0;\r\n\r\n\r\n}" 
                },
                {
                    "Question":"Write a C program that reads two triplets of floating point numbers al,bl,rl and a2,b2,r2\r\ndenoting the centers and radii of two circles. Here, al1,bl are the x.y coordinates of the center\r\nof the first circle with radius rl. Similarly, a2,b2 are the x,y coordinates of the center of the\r\nsecond circle with radius r2. Determine the distance between the centers of the two circles.\r\nDisplay your answer as a floating point number",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    float a1,b1,r1;\r\n    float a2,b2,r2,d;\r\n    printf(\"enter x co-ordinate of 1st circle\\n\");\r\n    scanf(\"%f\", &a1);\r\n    printf(\"\\nenter y co-ordinate of 1st circle\\n\");\r\n    scanf(\"%f\", &b1);\r\n    printf(\"\\nenter radius of 1st circle\\n\");\r\n    scanf(\"%f\", &r1);\r\n    printf(\"\\nenter x co-ordinate of 2nd circle\\n\");\r\n    scanf(\"%f\", &a2);\r\n    printf(\"\\nenter y co-ordinate of 2nd circle\\n\");\r\n    scanf(\"%f\", &b2);\r\n    printf(\"\\nenter radius of 2nd circle\\n\");\r\n    scanf(\"%f\", &r2);\r\n    d = sqrt(pow(a1 - a2 ,2) + pow(b1 - b2 ,2));\r\n    printf(\"\\nthe distance between two centers of circle is %f\", d);\r\n    return 0;\r\n\r\n}\r\n"
                },
                {
                    "Question":"In this probiem, you will compute the derivative of a degree polynomial of a single\r\nvariable. Assume that its coefficients are positive integers. Read 6 cocfficients as inputs\r\nfrom the keyboard. Display the polynomial, and then compute and display the derivative\r\npolynomial. A sample input and output below; stick to the format shown below.\r\nEnter coefficient of x0: 5\r\nEnter coefficient of x^1: 2\r\nEnter coefficient of x^2:2\r\nEnter coefficient of x^3:7\r\nEnter coefficient of x^4:0\r\nEnter coefficient of x^5:3\r\nPolynomial: 3x^5 +0*x^4+7*x^3-2*x^2+ 2*x +5\r\nDerivative: 15*1^4 + 0\"1*3+ 21*1^2-4*x +2",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int c0,c1,c2,c3,c4,c5;\r\n    printf(\"enter the coefficient of x^0\\n\");\r\n    scanf(\"%d\", &c0);\r\n    printf(\"enter the coefficient of x^1\\n\");\r\n    scanf(\"%d\", &c1);\r\n    printf(\"enter the coefficient of x^2\\n\");\r\n    scanf(\"%d\", &c2);\r\n    printf(\"enter the coefficient of x^3\\n\");\r\n    scanf(\"%d\", &c3);\r\n    printf(\"enter the coefficient of x^4\\n\");\r\n    scanf(\"%d\", &c4);\r\n    printf(\"enter the coefficient of x^5\\n\");\r\n    scanf(\"%d\", &c5);\r\n    printf(\"the polynomial is__%dx^5 + %dx^4 + %dx^3 + %dx^2 + %dx + %d\", c5,c4,c3,c2,c1,c0);\r\n    printf(\"\\nthe deriative is__\\n \");\r\n    printf(\"%dx^4 + %dx^3 + %dx^2 + %dx + %d\", 5*c5, 4*c4, 3*c3, 2*c2, c1);\r\n    return 0;\r\n\r\n}" 
                },
                {
                    "Question":"1. A circle (in the two-dimensional real plane) is defined in terms of three real numbers a, b and c. The\r\ndefining equation is of the form: x +y+ ax + by+c=0. Input three real numbers a, b, c from the user\r\nand display the three numbers. [1]\r\na. Determine if these three read numbers (a, b,c ) definea circle. If not, display the message: \"The\r\nthree numbers do not define a circle\" and quit. [3]\r\nb. If the read a,b,c values define a valid circle, then determine and display the center and radius of the\r\ncircle. [3]\r\nc. Read from keyboard the coordinates of a point. Display whether this point lies on, inside or outside\r\nthe circle. [3]",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n{\r\nint a, b, c, x, y;\r\nfloat d, e;\r\nprintf(\"The general eqn of circle is x^2 + y^2 + ax + by + c =0\\nEnter the values of a,b and c respectively..\\n\");\r\nscanf(\"%d%d%d\", &a, &b, &c);\r\nprintf(\"The eqn of your circle is \\n x^2 + y^2 + %dx + %dy + %d =0.\\n\", a, b, c);\r\nd = a * a \/ 4 + b * b \/ 4 - c;\r\nif (d < 0)\r\n{\r\nprintf(\"The three numberss do not define a circle.\\n\");\r\n}\r\nelse\r\n{\r\nprintf(\"The centre of the circle is (%d ,%d).\\n\", -a \/ 2, -b \/ 2);\r\nprintf(\"The radius of the circle is %f.\\n\", sqrt(d));\r\n}\r\nprintf(\"enter the x and y coordinates of your point respectively.\\n\");\r\nscanf(\"%d%d\", &x, &y);\r\ne = (pow((x + a \/ 2), 2) + pow((y + b \/ 2), 2));\r\nif (e > d)\r\n{\r\nprintf(\"The point lies outside the circle.\\n\");\r\n}\r\nelse if (e == d)\r\n{\r\nprintf(\"The point lies on the circle.\\n\");\r\n}\r\n\r\nelse\r\n{\r\nprintf(\"the point lies inside the circle.\\n\");\r\n}\r\n\r\nreturn 0;\r\n}" 
                },
                {
                    "Question":"2. Write a program to do the following:\r\na. Read the roll number (integer) of a student and the letter grades (E,A,B,C,D,P, and F) in three\r\nsubjects, the subject numbers, and the corresponding credits. If a user enters any letter other\r\nthan the letters corresponding to valid grades, your program should exit after displaying the\r\nmessage \"Cannot handle invalid grade!\". [Hint: exit from a program can be achieved by writing\r\n\"return 0\" as the body of the if statement checking whether the entered letter corresponds to\r\na valid grade.] Display the Roll number of the student and the subject numbers and the\r\ncorresponding grades nicely formatted.\r\nb. Compute and display the GPA (Grade Point Average). Assume E grade=10points, A grade=9\r\npoints, B grade = 8 points, C grade=7 points, D grade=6 points, P grade=5 points, F grade=0\r\npoints.\r\n",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\nint r, s1, s2, s3, c1, c2, c3;\r\nint p1, p2, p3;\r\nchar g1, g2, g3;\r\nfloat gpa;\r\nprintf(\"Enter the Roll No.__\\n \");\r\nscanf(\"%d\", &r);\r\nprintf(\"enter the subject no. of S1\\n\");\r\nscanf(\"%d\", &s1);\r\nprintf(\"Enter the credits in in S1\\n\");\r\nscanf(\"%d\", &c1);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g1);\r\nif (g1 != 'E' && g1 != 'A' && g1 != 'B' && g1 != 'C' && g1 != 'D' && g1 != 'P' && g1 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\n\r\nprintf(\"enter the subject no. of S2\\n\");\r\nscanf(\"%d\", &s2);\r\nprintf(\"Enter the credits in in S2\\n\");\r\nscanf(\"%d\", &c2);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g2);\r\nif (g2 != 'E' && g2 != 'A' && g2 != 'B' && g2 != 'C' && g2 != 'D' && g2 != 'P' && g2 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\nprintf(\"enter the subject no. of S3\\n\");\r\nscanf(\"%d\", &s3);\r\nprintf(\"Enter the credits in in S3\\n\");\r\nscanf(\"%d\", &c3);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g3);\r\nif (g3 != 'E' && g3 != 'A' && g3 != 'B' && g3 != 'C' && g3 != 'D' && g3 != 'P' && g3 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\nprintf(\"*****\\nRoll No. -- %d\\n*****\\n\", r);\r\nprintf(\"\\nSubject No.       Credits     Grades\\n\");\r\nprintf(\"%d                    %d           %c\\n\", s1, c1, g1);\r\nprintf(\"%d                    %d           %c\\n\", s2, c2, g2);\r\nprintf(\"%d                    %d           %c\\n\", s3, c3, g3);\r\n\r\nif (g1 == 'E')\r\n{\r\np1 = 10;\r\n}\r\nelse if (g1 == 'A')\r\n{\r\np1 = 9;\r\n}\r\nelse if (g1 == 'B')\r\n{\r\np1 = 8;\r\n}\r\nelse if (g1 == 'C')\r\n{\r\np1 = 7;\r\n}\r\nelse if (g1 == 'D')\r\n{\r\np1 = 6;\r\n}\r\nelse if (g1 == 'P')\r\n{\r\np1 = 5;\r\n}\r\nelse if (g1 == 'F')\r\n{\r\np1 = 0;\r\n}\r\nif (g2 == 'E')\r\n{\r\np2 = 10;\r\n}\r\nelse if (g2 == 'A')\r\n{\r\np2 = 9;\r\n}\r\nelse if (g2 == 'B')\r\n{\r\np2 = 8;\r\n}\r\nelse if (g2 == 'C')\r\n{\r\np2 = 7;\r\n}\r\nelse if (g2 == 'D')\r\n{\r\np2 = 6;\r\n}\r\nelse if (g2 == 'P')\r\n{\r\np2 = 5;\r\n}\r\nelse if (g2 == 'F')\r\n{\r\np2 = 0;\r\n}\r\nif (g3 == 'E')\r\n{\r\np3 = 10;\r\n}\r\nelse if (g3 == 'A')\r\n{\r\np3 = 9;\r\n}\r\nelse if (g3 == 'B')\r\n{\r\np3 = 8;\r\n}\r\nelse if (g3 == 'C')\r\n{\r\np3 = 7;\r\n}\r\nelse if (g3 == 'D')\r\n{\r\np3 = 6;\r\n}\r\nelse if (g3 == 'P')\r\n{\r\np3 = 5;\r\n}\r\nelse if (g3 == 'F')\r\n{\r\np3 = 0;\r\n}\r\ngpa = (p1 * c1 + p2 * c2 + p3 * c3) \/ (c1 + c2 + c3);\r\nprintf(\"\\n***********\\nThe GPA is %f.\\n**********\\n\", gpa);\r\nreturn 0;\r\n}"
                },
                {
                    "Question":" Write a program that takes an integer number between 1 and 100 as input, and then displays the value\r\nof the input in words. Some sample inputs and outputs are:\r\nInput: 13\r\nOutput: Thirteen\r\nInput: 56\r\nOutput: Fifty six\r\nOutput: Ninety eight\r\nNote that, a brute force method is to write 100 if-else statements. But, this will fetch you only 75% marks.\r\nThis problem can be solved using far less number of conditional statements, by utilizing the fact that the\r\nword representations of numbers between 20 and 99 follow a pattern.",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\nint a, b, c;\r\nprintf(\"Enter your number between 0 to 100.\\n\");\r\nscanf(\"%d\", &a);\r\nb = a % 10;\r\nc = a \/ 10;\r\nif (c == 9)\r\n{\r\nprintf(\"Ninety \");\r\n}\r\nelse if (c == 8)\r\n{\r\nprintf(\"Eighty \");\r\n}\r\nelse if (c == 7)\r\n{\r\nprintf(\"Seventy \");\r\n}\r\nelse if (c == 6)\r\n{\r\nprintf(\"Sixty \");\r\n}\r\nelse if (c == 5)\r\n{\r\nprintf(\"Fifty \");\r\n}\r\nelse if (c == 4)\r\n{\r\nprintf(\"Forty \");\r\n}\r\nelse if (c == 3)\r\n{\r\nprintf(\"Thirty \");\r\n}\r\nelse if (c == 2)\r\n{\r\nprintf(\"Twenty \");\r\n}\r\nif (c != 1 && b == 1)\r\n{\r\nprintf(\"one\");\r\n}\r\nelse if (c != 1 && b == 2)\r\n{\r\nprintf(\"two\");\r\n}\r\nelse if (c != 1 && b == 3)\r\n{\r\nprintf(\"three\");\r\n}\r\nelse if (c != 1 && b == 4)\r\n{\r\nprintf(\"four\");\r\n}\r\nelse if (c != 1 && b == 5)\r\n{\r\nprintf(\"five\");\r\n}\r\nelse if (c != 1 && b == 6)\r\n{\r\nprintf(\"six\");\r\n}\r\nelse if (c != 1 && b == 7)\r\n{\r\nprintf(\"seven\");\r\n}\r\nelse if (c != 1 && b == 8)\r\n{\r\nprintf(\"eight\");\r\n}\r\nelse if (c != 1 && b == 9)\r\n{\r\nprintf(\"nine\");\r\n}\r\nif (c == 1 && b == 1)\r\n{\r\nprintf(\"Eleven\");\r\n}\r\nelse if (c == 1 && b == 2)\r\n{\r\nprintf(\"Twelve\");\r\n}\r\nelse if (c == 1 && b == 3)\r\n{\r\nprintf(\"Thirteen\");\r\n}\r\nelse if (c == 1 && b == 4)\r\n{\r\nprintf(\"Fourteen\");\r\n}\r\nelse if (c == 1 && b == 5)\r\n{\r\nprintf(\"fifteen\");\r\n}\r\nelse if (c == 1 && b == 6)\r\n{\r\nprintf(\"Sixteen\");\r\n}\r\nelse if (c == 1 && b == 7)\r\n{\r\nprintf(\"Seventeen\");\r\n}\r\nelse if (c == 1 && b == 8)\r\n{\r\nprintf(\"Eighteen\");\r\n}\r\nelse if (c == 1 && b == 9)\r\n{\r\nprintf(\"Nineteen\");\r\n}\r\nelse if (c == 1 && b == 0)\r\n{\r\nprintf(\"Ten\");\r\n}\r\nreturn 0;\r\n}"
                },
                {
                    "Question": "Write a C program to perform the following tasks.\r\n\r\n1. Let P = (x1, y1) and Q = (x2, y2) be two points in the two-dimensional plane. Assume that the\r\nstraight line join P and Q does not pass through the origin. These coordinates should be floatingpoint\r\nnumbers.\r\n\r\n2. Print the equation of the straight line joining P and Q in aX + bY + c = 0 format. You are not\r\nrequired to ensure that the gcd of a, b, and c is 1. Any valid equation is acceptable.\r\n\r\n3. Print the distance of the straight line from the origin.\r\n\r\n4. Print the mirror-image of the origin with respect to the straight line joining P and Q.\r\n\r\n5. Take R = (x3, y3) a point as input from the user. Print if R lies on the straight-line joining P and Q.\r\n\r\n6. Print the mirror-image of R with respect to the straight line joining P and Q.\r\n\r\nYou may require math library functions. For that, you use the following code in the beginning of your\r\ncode.\r\n\r\n#include<math.h>\r\nTo compile your code, you the following command in terminal.\r\ngcc .\/program.c -lm\r\n\r\nTo compare a floating point variable, say x, with a floating point constant, say 2, use the following\r\ncode\r\n``if (x== 2.0f)'' or ``if (x > 2.0f)'' etc.\r\n\r\nSample Output:\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out .\/a.out\r\nWrite x1: 3.4\r\nWrite y1: -2.6\r\nWrite x2: -5.2\r\nWrite y2: -19\r\nEquation of the line joinig the two points is 16.400000X+(-8.600000)Y+(-78.120003)=0\r\nThe distance of the line from the origin is 4.218576\r\nMirror image of the origin with respect to the line is (7.472110,-3.918302)\r\nWrite x3: 32\r\nWrite y3: -9.2\r\nThe point (32.000000,-9.200000) does not lie on the straight line\r\nMirror image of (32.000000,-9.200000) with respect to the line is (-18.292313,17.172802)\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    \/\/ Task 1\r\n    float x1,x2,y1,y2;\r\n    printf(\"Write x1: \");\r\n    scanf(\"%f\",&x1);\r\n    printf(\"Write y1: \");\r\n    scanf(\"%f\",&y1);\r\n    printf(\"Write x2: \");\r\n    scanf(\"%f\",&x2);\r\n    printf(\"Write y2: \");\r\n    scanf(\"%f\",&y2);\r\n\r\n    \/\/Task 2\r\n    float a=1.0; \/\/ 'a' is assigned a value which is used to find b and c\r\n    float slope=(y2-y1)\/(x2-x1);\r\n    float b=-(a\/slope);\r\n    float c=-(a*x1+b*y1);\r\n    printf(\"Equation of the line joining the two points is %fX+(%fY)+(%f)=0\\n\",a,b,c);\r\n\r\n    \/\/Task 3\r\n    float distance=fabs(c\/(sqrt(a*a+b*b))); \/\/ Distance is always positive so applied fabs()\r\n    printf(\"The distance of the line from the origin is %f\\n\",distance);\r\n\r\n    \/\/Task 4\r\n    float mirror_x_0=-(2*a*c)\/(a*a+b*b);\r\n    float mirror_y_0=-(2*b*c)\/(a*a+b*b);\r\n    printf(\"Mirror image of the origin with respect to the line is (%f,%f)\\n\",mirror_x_0,mirror_y_0);\r\n\r\n    \/\/Task 5\r\n    float x3,y3;\r\n    printf(\"Write x3: \");\r\n    scanf(\"%f\",&x3);\r\n    printf(\"Write y3: \");\r\n    scanf(\"%f\",&y3);\r\n    float result=fabs((a*x3+b*y3+c)); \/\/ Applied fabs() keeping in mind 0.0 and -0.0\r\n    if(result==0.0f){\r\n        printf(\"The point (%f,%f) lies on the straight line\\n\",x3,y3);\r\n    }\r\n    else{\r\n        printf(\"The point (%f,%f) does not lie on the straight line\\n\",x3,y3);\r\n    }\r\n\r\n    \/\/Task 6\r\n    float mirror_x_x3=x3-((2*a*result)\/(a*a+b*b));\r\n    float mirror_y_y3=y3-((2*b*result)\/(a*a+b*b));\r\n    printf(\"Mirror image of (%f,%f) with respect to the line is (%f,%f)\",x3,y3,mirror_x_x3,mirror_y_y3);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write C code which reads a floating point number x\r\nand an integer n ( 0 to 10  both inclusive ) from keyboard and computes the\r\nfollowing.\r\n(a) SUM = x + (x+1) + (x+2) + (x+3) + \u2026\u2026.. +\r\n(x+n)\r\n(b) PRODUCT = x * (x+1) * (x+2) * (x+3) *\r\n\u2026\u2026.. * (x+n)\r\n(c) Take as input another positive floating point\r\nnumber y.\r\n(d) Now, enter an operator from the keyboard and\r\nperform the operation. The operator can be any of\r\nthe following\r\n+ (addition)\r\n- (subtraction)\r\n* (multiplication)\r\n\/ (division) and\r\n% (remainder)\r\nCalculate x <operator> y.\r\n(e) Print x, the sum, the product and the floating\r\npoint number you obtain from the calculator.",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    float x,SUM=0.0,PRODUCT=1.0;\r\n    int n;\r\n    printf(\"Enter x (floating point number) : \");\r\n    scanf(\"%f\",&x); \/\/ x is taken as input from user\r\n    printf(\"Enter n (integer) : \");\r\n    scanf(\"%d\",&n); \/\/ n is taken as input from user\r\n    if(n>=0 && n<=10){\r\n        SUM=(x*(n+1))+((n*(n+1))\/2); \/\/ (a) Calculating sum as per the given series using some math formulas\r\n    }\r\n    \/* (b) Calculating product as per the given series *\/\r\n    \/* Control enters in switch case as per the value of n\r\n       and starts to calculate the series backwards from that value of n towards the first term\r\n    *\/\r\n    switch(n){\r\n        case 10:\r\n            PRODUCT=PRODUCT*(x+10);\r\n        case 9:\r\n            PRODUCT=PRODUCT*(x+9);\r\n        case 8:\r\n            PRODUCT=PRODUCT*(x+8);\r\n        case 7:\r\n            PRODUCT=PRODUCT*(x+7);\r\n        case 6:\r\n            PRODUCT=PRODUCT*(x+6);\r\n        case 5:\r\n            PRODUCT=PRODUCT*(x+5);\r\n        case 4:\r\n            PRODUCT=PRODUCT*(x+4);\r\n        case 3:\r\n            PRODUCT=PRODUCT*(x+3);\r\n        case 2:\r\n            PRODUCT=PRODUCT*(x+2);\r\n        case 1:\r\n            PRODUCT=PRODUCT*(x+1);\r\n        case 0:\r\n            PRODUCT=PRODUCT*x;\r\n            break;\r\n        default:\r\n            printf(\"The value of n should be an integer from 0 to 10 both inclusive!\\n\");\r\n    }\r\n    float y;\r\n    char operator,holder;\r\n    float result=0;\r\n    printf(\"Enter y (positive floating point number) : \");\r\n    scanf(\"%f\",&y); \/\/ (c) y is taken as input from user\r\n\r\n    \/* holder is used to hold the null terminator character\r\n       after input of y which otherwise gets stored in operator variable.\r\n       apart from this, holder has no use as such in this program\r\n    *\/\r\n    scanf(\"%c\",&holder);\r\n\r\n    \/* Start of part (d) *\/\r\n    printf(\"Type + for addition.\\n\");\r\n    printf(\"Type - for subtraction.\\n\");\r\n    printf(\"Type * for multiplication.\\n\");\r\n    printf(\"Type \/ for division.\\n\");\r\n    printf(\"Type percentage sign for remainder.\\n\");\r\n    printf(\"Enter an operator: \");\r\n    scanf(\"%c\",&operator); \/\/ operator to be used in calculator is taken as input from user\r\n    switch(operator){\r\n        case '+':\r\n            result=x+y; \/\/ addition\r\n            break;\r\n        case '-':\r\n            result=x-y; \/\/ subtraction\r\n            break;\r\n        case '*':\r\n            result=x*y; \/\/ multiplication\r\n            break;\r\n        case '\/':\r\n            result=(int)(x\/y); \/\/ division\r\n            break;\r\n        case '%':\r\n            result=fmod(x,y); \/\/remainder\r\n            break;\r\n        default:\r\n            printf(\"Sorry you have entered an invalid operator!\\n\");\r\n    }\r\n    \/* Entering part (e) *\/\r\n    printf(\"The value of x is: %f\\n\",x);\r\n    printf(\"The sum is: %f\\n\",SUM);\r\n    printf(\"The product is: %f\\n\",PRODUCT);\r\n    printf(\"The floating point number obtained from the calculator is: %f\\n\",result);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "\"A particle starts from a point A(a,0) on x-axis with an initial speed u \nand moves along +x-axis with an acceleration alpha. \nLet d be its distance from the origin (0,0) after t seconds. \nWrite a program to compute the value of d and print it on the terminal. \nThe values of a, u, alpha, and t are real and supplied by the user during execution of your program.\r\n\r\n                Enter the values of a, u, alpha in order: 5 2 3  \r\n                Enter the time: 3\r\n                Distance = 24.500000\r\n                \r\n                Enter the values of a, u, alpha in order: -5 6 7\r\n                Enter the time: 9.23\r\n                Distance = 348.555115",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float a,u,alpha,t,d;\r\n    printf(\"Enter the values of a,u,alpha in order: \");\r\n    scanf(\"%f %f %f\",&a,&u,&alpha);\r\n    printf(\"Enter the time: \");\r\n    scanf(\"%f\",&t);\r\n    d = u*t+0.5*alpha*t*t +a;\r\n    printf(\"Distance = %f\", d);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "User supplies a 3-digit number. Your program should reverse the digits and print the resultant number on the terminal. \nYou are not allowed to use loops.\r\n\r\n                Enter a 3-digit number: 567\r\n                Reverse number = 765\r\n                \r\n                Enter a 3-digit number: 222\r\n                Reverse number = 222\r\n                \r\n                Enter a 3-digit number: 891\r\n                Reverse number = 198\r\n                \r\n                Enter a 3-digit number: 120\r\n                Reverse number = 021 \/ 21",
                    "Answer": "#include<stdio.h>\r\n            int main(){\r\n            int a,ones,hundredths,d,tens, number;\r\n            printf(\"In this program, you will get a reverse of a three digit number\\n\");\r\n            printf(\"Enter a three digit number:\\n\");\r\n            scanf(\"%d\",&a);\r\n            ones = a\/100;\r\n            hundredths = a%10;\r\n            d = a\/10;\r\n            tens = d%10;\r\n            tens = tens*10;\r\n            hundredths = hundredths*100;\r\n            number = hundredths+tens+ones;\r\n            printf(\"The reverse of the number entered is:%d\",number);\r\n            return 0;\r\n            }"
                },
                {
                    "Question": "In an automobile company, the number of cars manufactured on a day, say n, depends on which day of the week it is.\r\n                Monday means Day 1, Tuesday means Day 2, ..., Sunday means Day 7.\r\n                For Day 1, number of manufactured cars per day is given by the number of available machines (say m, which is a user input).\r\n                For Day 2, n is m + m\/2 + m\/4, rounded off to the nearest integer.\r\n                For Day 3 and Day 6, k machines (k is user input) are kept under inspection, and so n becomes m-k + (m-k)\/2 + (m-k)\/4, rounded off to the nearest integer.\r\nFor the other days, n is m plus a boosting fraction f of m, rounded off to the nearest integer,\r\n                where the fraction f is positive and less than 1 and taken as user input.\r\n                Given the week day (1 to 7) as input, find the number of manufactured cars (n) on that day.\r\n                You should use switch-case statements.\r\n                \r\n                Example 1\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 1\r\n                Number of manufactured cars = 11.\r\n                \r\n                Example 2\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 2\r\n                Number of manufactured cars = 19.\r\n                \r\n                Example 3\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 3\r\n                Enter no. of machines under inspection: 5\r\n                Number of manufactured cars = 11.\r\n                \r\n                Example 4\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 4\r\n                Enter boosting fraction: .33\r\n                Number of manufactured cars = 15.",
                    "Answer": "#include <stdio.h>\r\n            #include <math.h>\r\n            int main()\r\n            {\r\n                int n,d,k;\r\n                float f,m;\r\n                printf(\"Enter the no. of machines in the company: \");\r\n                scanf(\"%f\",&m);\r\n                printf(\"Enter the week day number(1-7): \");\r\n                scanf(\"%d\",&d);\r\n                switch(d)\r\n                {\r\n                    case 1:\r\n                        n=m;\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 2:\r\n                        n=round(m+m\/2+m\/4);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 3:\r\n                    case 6:\r\n                        printf(\"Enter no. of machines kept under inspection: \");\r\n                        scanf(\"%d\",&k);\r\n                        n=round((m-k)+(m-k)\/2.0+(m-k)\/4.0);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 4:\r\n                    case 5:\r\n                    case 7:\r\n                        printf(\"Enter Boosting Factor: \");\r\n                        scanf(\"%f\",&f);\r\n                        n=round(m+f*m);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    default:\r\n                        printf(\"Invalid Input!\");\r\n                }\r\n                return 0;\r\n            }"
                },
                {
                    "Question": "Write a C program that take three coordinates as input. \nNext, it checks if the triangle is acute-angled, right-angled, or obtuse-angled.  \nYour code should do the following: - first compute the lengths of three sides of the triangle; - \ncheck whether the input satisfies the triangle inequality property, \ni.e., max side length is less than the sum of the other two sides; \n- do necessary checking and print the type of the triangle in the terminal. Sample input:\r\n                \r\n                Enter the three coordinates: (2, 4), (6, 9), (-2, 7)\r\n                \r\n                This is a valid\/invalid triangle\r\n                \r\n                This is a XX (acute-angled\/right-angled\/obtuse-angled) triangle",
                    "Answer": "#include<stdio.h>\r\n            #include<math.h>\r\n            int main(){\r\n            float x1,y1,x2,y2,x3,y3,a,b,c,t;\r\n            printf(\"We are going to find the type of triangle in this program\\n\");\r\n            printf(\"Enter the coordinates (x1,y1),(x2,y2) and (x3,y3) in the mentioned order\\n\");\r\n            scanf(\"%f%f\",&x1,&y1);\r\n            scanf(\"%f%f\",&x2,&y2);\r\n            scanf(\"%f%f\",&x3,&y3);\r\n            a = sqrt(pow(x2-x1,2)+pow(y2-y1,2));\r\n            b = sqrt(pow(x3-x2,2)+pow(y3-y2,2));\r\n            c = sqrt(pow(x3-x1,2)+pow(y3-y1,2));\r\n            if (a>b){\r\n                t=a;\r\n                a=b;\r\n                b=t;\r\n            }\r\n            if (b>c){\r\n                t=c;\r\n                c=b;\r\n                b=t;\r\n            }\r\n            if (a>b){\r\n                t=a;\r\n                a=b;\r\n                b=t;\r\n            }\r\n            \r\n            if (a+b>c){\r\n                printf(\"The triangle is valid\\n\");\r\n                }else{\r\n                printf(\"The triangle is invalid\\n\");\r\n                }\r\n            \r\n            \r\n                    if ((c - sqrt(pow(a,2)+pow(b,2)))*(c - sqrt(pow(a,2)+pow(b,2)))<0.001 ){\r\n                        printf(\"It is a right angled triangle\\n\");\r\n                    }else if (c> sqrt(pow(a,2)+pow(b,2))){\r\n                        printf(\"It is an obtuse angled triangle\\n\");\r\n                    }else if (c<sqrt(pow(a,2)+pow(b,2)))\r\n                        printf(\"It is an acute angled triangle\\n\");\r\n            return 0;\r\n            }"
                },
                {
                    "Question": "Write a program to perform the following for a user who wants to purchase wood:\r\n                i) Ask the user for the type of wood ('n' for natural wood, 's' for synthetic wood).\r\n                ii) Ask for the weight he wants.\r\n                iii) Compute and print the base price.\r\n                iv) Compute and print the GST.\r\n                v) Compute and print the total price.\r\n                \r\n                All prices should have two digits in the decimal place (use %XX.YYf format for this).\r\n                Assume that price of natural wood is Rs. 1100\/kg, that of synthetic one is Rs. 780\/kg, and \n               the respective GSTs are 20% and 15% on the base price.\r\n        \r\n        Example:\r\n        Enter the type of wood (n for natural wood, s for synthetic wood): n\r\n        Enter the weight of wood (in Kg.) you want: 7.25\r\n        -------------------------\r\n        Base price =     7975.00\r\n        GST =            1595.00\r\n        Total price =    9570.00\r\n        -------------------------\r\n        \r\n        Example\r\n        Enter the type of wood (n for natural wood, s for synthetic wood): n\r\n        Enter the weight of wood (in Kg.) you want: 13.12\r\n        -------------------------\r\n        Base price =    14432.00\r\n        GST =            2886.40\r\n        Total price =   17318.40\r\n        -------------------------",
                    "Answer": "#include<stdio.h>\r\n       int main(){\r\n           char a,n,s;\r\n           float weight, Bp, Gst, Tp;\r\n           printf(\"Enter the type of wood(n for natural wood, s for synthetic wood):\\n\");\r\n           scanf(\"%c\", &a);\r\n           if (a =='n'){\r\n               printf(\"Enter the weight of wood(in kg) you want:\\n\");\r\n               scanf(\"%f\",&weight);\r\n               printf(\"--------------\\n\");\r\n               Bp = 1100*weight;\r\n               printf(\"Base price = %0.2f\\n\",Bp);\r\n               Gst = Bp*0.2;\r\n               printf(\"GST= %0.2f\\n\", Gst);\r\n               Tp = Bp+Gst;\r\n               printf(\"Total  price = %0.2f\\n\",Tp);\r\n               printf(\"--------------\\n\");\r\n           }\r\n           if (a=='s'){\r\n               printf(\"Enter the weight of wood(in kg) you want:\\n\");\r\n               scanf(\"%f\",&weight);\r\n               printf(\"--------------\\n\");\r\n               Bp = 780*weight;\r\n               printf(\"Base price = %0.2f\\n\",Bp);\r\n               Gst = Bp*0.15;\r\n               printf(\"GST= %0.2f\\n\", Gst);\r\n               Tp = Bp+Gst;\r\n               printf(\"Total  price = %0.2f\\n\",Tp);\r\n               printf(\"--------------\\n\");\r\n           }\r\n           else{\r\n                   printf(\"Invalid input\\n\");\r\n           }\r\n       return 0;\r\n       }"
                },
                {
                    "Question": "Write a C program to input two floating point variables a and b from the user \nand compute the result of the expression (a+b)(a-b). \nShow the output up to two decimal points.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    float a,b;\r\n    printf(\"Enter 1st number(a): \");\r\n    scanf(\"%f\",&a);\r\n    printf(\"Enter 2nd number(b): \");\r\n    scanf(\"%f\",&b);\r\n    float outputSum = (a+b)*(a-b);\r\n    printf(\"\\nThe value of (a+b)(a-b) is %0.2f\",outputSum);\r\n}"
                },
                {
                    "Question": "Write a C program which takes the individual components of your roll number(integer and character components) as an input \nand then prints 'Hello' followed by your roll number in the output.\nFor example, if your roll number is 21CS30023, then it will take 21 as integer, C and S as character, and 30023 as integer.",
                    "Answer": "#include <stdio.h>\r\n#include <ctype.h>\r\n\r\nint main(){\r\n    int firstTwoDigits,lastFiveDigits;\r\n    char char3,char4;\r\n    printf(\"Enter the first two digits of your roll number: \");\r\n    scanf(\"%d\",&firstTwoDigits);\r\n    printf(\"Enter third character: \");\r\n    scanf(\" %c\",&char3);\r\n    printf(\"Enter fourth character: \");\r\n    scanf(\" %c\",&char4);\r\n    printf(\"Enter the last five digits of your roll number: \");\r\n    scanf(\"%d\",&lastFiveDigits);\r\n\r\n    printf(\"\\nHello %d%c%c%d\",firstTwoDigits,toupper(char3),toupper(char4),lastFiveDigits);\r\n}"
                },{
                    "Question": "Write a C program to check if a given integer is divisible by 2,3,5 or 7.",
                    "Answer": "#include <stdio.h>\r\n \r\n int main() {\r\n     int num; \r\n     int flag = 0; \r\n     \r\n     printf(\"Enter the number:\");\r\n     scanf(\"%d\", &num);\r\n     printf(\"\\n\");\r\n     \r\n     if(num % 2 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 2\\n\");\r\n     }\r\n     if(num % 3 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 3\\n\");\r\n     }\r\n     if(num % 5 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 5\\n\");\r\n     }\r\n     if(num % 7 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 7\\n\");\r\n     }\r\n     \r\n     if(flag == 0) {\r\n         printf(\"Not divisible by any\\n\");\r\n     }\r\n     \r\n     return 0; \r\n }\r\n\r\n"
                },
                {
                    "Question": "Say, you input a 4 digit integer number. Write a C program to check the input number contains only the binary digits 0 and 1.\\n",
                    "Answer": "#include <stdio.h>\r\n \r\n int main() {\r\n     int num, digit; \r\n     \r\n     int flag = 1; \r\n     \r\n     printf(\"Enter the four digit number:\");\r\n     scanf(\"%d\", &num);\r\n     printf(\"\\n\");\r\n     \r\n     \/* extract and check the fourth digit *\/ \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n\r\n     \/* extract and check the third digit *\/      \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n\r\n     \/* extract and check the second digit *\/      \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n     \r\n     \/* Check the first digit *\/      \r\n     if(num > 1) {\r\n         flag = 0; \r\n     }\r\n     \r\n     \r\n     if(flag == 0) {\r\n         printf(\"No\\n\");\r\n     } else {\r\n         printf(\"Yes\\n\"); \r\n     }\r\n     \r\n     return 0; \r\n }"
                },
                {
                    "Question": "Write a C Program that reads in three points on a 2 dimensional plane (integers). All three will not be in a single\r\nstraight line. These are corner points of an isosceles triangle T1. You will first test whether the triangle T1 is\r\nindeed an isosceles triangle or not. If it is isosceles, you will find the lengths of base, height and also the area\r\nof the triangle T1 and print them. Next, you will find the length of the isosceles side of a Triangle T2, which has\r\ndouble the area and three times the base length as T1 and print it. \r\nSave the file as A01_<Roll Number>.c (example A01_21AG10002.c). Build, Run for and test it for the given data.\r\nThen upload the .c file for the Assignment.\r\nIn particular, you will do the following:\r\n1. Read x and y integer coordinates of three points of T1 and print them.\r\n2. Find out the lengths of the three sides of T1 and print them.\r\n3. Test whether they form an isosceles triangle. If no, print that T1 is not an isosceles triangle and end.\r\n4.\r\nIf it is an isosceles triangle, then print the lengths of base and height of T1 and also print the area of T1.\r\nIf T1 is an isosceles triangle, then print the length of the isosceles side of another isosceles triangle T2\r\nwhose base is three times that of T1 and area is twice that of T1.\r\nTest Data: \r\n5.\r\nTest 1: <0,0>, <10,0>, <5,5>, Test 2: <4,12>, <8,16>, <3,3>\r\nTest 3: <10,10>, <-3,3>, <3,-3> ",
                    "Answer": ""
                },
                {
                    "Question": "Write a C Program that will read four integer values, find how may of them are unique and print only the unique\r\nelements in ascending order. For example, if the integers read in are 5, 8, 1,5 then you will first print that there\r\nare 3 unique elements and then print 1, 5, 8.\r\nSave the file as A02_<Roll Number>.c (example A02_21AG10002.c). Build, Run for and test it for the given data.Then upload the .c file for the Assignment. \r\nIn particular, you will do the following:\r\n1. Read in four integers and print them.\r\n2. Print how many unique elements are there.\r\n3. Print the unique elements in ascending order.\r\nTest Data:\r\n1. 7, 1, 7, 1\r\n2. 4, 4, 4, 2\r\n3. 1, 5, 8, 2\r\n4. 5, 5, 5, 5",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int a1, a2, a3, a4, unique, c1, c2, c3, c4;\r\n    int b1, b2, b3, b4;\r\n    printf(\"Give 4 integers input (separated by space): \");\r\n    scanf(\"%d %d %d %d\",&a1,&a2,&a3,&a4);\r\n    unique = 1;\r\n    b1 = a1;\r\n\r\n    if ((a2!=b1))\r\n    {\r\n        b2 = a2;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b2 = -1;\r\n\r\n    if ((a3!=b1)&&(a3!=b2))\r\n    {\r\n        b3 = a3;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b3 = -1;\r\n\r\n    if ((a4!=b1) && (a4!=b2) && (a4!=b3))\r\n    {\r\n        b4 = a4;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b4 = -1;\r\n\r\n    printf(\"\\nNo. of unique values: %d\\n\",unique);\r\n\r\n    c1=b1;\r\n    printf(\"\\nThe numbers in non-decreasing order: \");\r\n\r\n    switch (unique)\r\n    {\r\n    case 1:\r\n        printf(\"%d\",c1);\r\n        break;\r\n\r\n    case 2:\r\n        {\r\n            if (b2>0)\r\n                c2 = b2;\r\n            else if (b3>0)\r\n                c2 = b3;\r\n            else\r\n                c2 = b4;\r\n\r\n            if (c1>c2)\r\n                printf(\"%d %d\",c2,c1);\r\n            else\r\n                printf(\"%d %d\",c1,c2);\r\n            break;\r\n        }\r\n    case 3:\r\n        {\r\n            if (b2<0)\r\n            {\r\n                c2 = b3;\r\n                c3 = b4;\r\n            }\r\n            else if (b3<0)\r\n            {\r\n                c2 = b2;\r\n                c3 = b4;\r\n            }\r\n            else\r\n            {\r\n                c2 = b2;\r\n                c3 = b3;\r\n            }\r\n\r\n            if (c1>c2)\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c2>c3)\r\n                    {\r\n                        printf(\"%d %d %d\",c3,c2,c1);\r\n                    }\r\n                    else\r\n                    {\r\n                        printf(\"%d %d %d\",c2,c3,c1);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    printf(\"%d %d %d\",c2,c1,c3);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    printf(\"%d %d %d\",c3,c1,c2);\r\n                }\r\n                else\r\n                {\r\n                    if (c2>c3)\r\n                    {\r\n                        printf(\"%d %d %d\",c1,c3,c2);\r\n                    }\r\n                    else\r\n                    {\r\n                        printf(\"%d %d %d\",c1,c2,c3);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n    case 4:\r\n        {\r\n            c2 = b2;\r\n            c3 = b3;\r\n            c4 = b4;\r\n\r\n            if (c1>c2)\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c4,c3,c2,c1);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c3,c4,c2,c1);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                printf(\"%d %d %d %d\",c3,c2,c4,c1);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                printf(\"%d %d %d %d\",c4,c2,c3,c1);\r\n                            }\r\n                            else\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c2,c4,c3,c1);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c2,c3,c4,c1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c2,c1,c4);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c3,c1,c4);\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c2,c1,c3);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c4,c1,c3);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c3>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c1,c4,c3);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c1,c3,c4);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c3>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c3,c1,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c4,c1,c2);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c1,c4,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c1,c2,c4);\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c1,c3,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c1,c2,c3);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            if(c2>c4)\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c4,c3,c2);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c3,c4,c2);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                printf(\"%d %d %d %d\",c1,c4,c2,c3);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                printf(\"%d %d %d %d\",c1,c4,c2,c3);\r\n                            }\r\n                            else\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c2,c4,c3);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c2,c3,c4);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program that reads in five integers. If the numbers are not distinct, it prints \u201CNOT DISTINCT\u201D and terminates.\r\nIf they are all distinct, then it finds and prints the following: largest, smallest, sum and median of the five numbers.\r\nSave the file as A03_<Roll Number>.c (example A03_21AG10002.c). Build, Run for and test it for the given data. Then\r\nupload the .c file for the Assignment.\r\nIn particular, you will do the following:\r\n1. Read five integers and print them. They must be printed in a single line with commas in between numbers.\r\n2.\r\nIf the numbers are not distinct, in a new line, print \u201CNOT DISTINCT\u201D and terminate\r\nIf they are all distinct, then print the following in a new line each\r\na) Largest of the five numbers as \u2013 Largest = <Print the largest number>\r\nb) Smallest of the five numbers as \u2013 Smallest = <Print the smallest number>\r\nc) Sum of the five numbers as \u2013 Sum = <Print the sum>\r\nd) Median of the five numbers as \u2013 Median = <Median of the five numbers>\r\nTest Data: (Inputs will be given one after another without commas)\r\na) 7     9     23     1     5\r\nb) 3     7     19    -1     8\r\nc) 4     1       9    11    9\r\nd) -2    8       0    -1   -9  \r\n",
                    "Answer" : "\r\n#include <stdio.h>\r\n\r\n\/*take 5 int input as\r\nd1 d2 d3 d4 d5\r\nprint all\r\ncheck if distinct\r\nif not distinct, print so and end\r\nif distinc, largest smallest sum median*\/\r\n\r\nmain(){\r\n    int d1,d2,d3,d4,d5,temp;\r\n    printf(\"Enter your data\\n\");\r\n    scanf(\"%d%d%d%d%d\",&d1,&d2,&d3,&d4,&d5);\r\n    printf(\"\\n%d %d %d %d %d\",d1,d2,d3,d4,d5);\r\n    if (d1==d2 || d1==d3 || d1==d4 || d1==d5 ||\r\n        d2==d3 || d2==d4 || d2==d5 ||\r\n        d3==d4 || d3==d5 ||\r\n        d4==d5)printf(\"\\nNot distinct\\n\");\r\n\r\n    else{\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n        if (d3<d2) temp=d2, d2=d3, d3=temp;\r\n        if (d2<d1) temp=d1, d1=d2, d2=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n        if (d3<d2) temp=d2, d2=d3, d3=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n\r\n        printf(\"\\nLargest:%d\\n\",d5);\r\n        printf(\"Smallest:%d\\n\", d1);\r\n        printf(\"Sum:%d\\n\", d1+d2+d3+d4+d5);\r\n        printf(\"Median:%d\\n\", d3);\r\n\r\n    }\r\n}"
                },
                {
                    "Question":"Write a C program to print on the screen the following lines in the exact same sequence as given.\r\nYou cannot use more than TWO printf() to print everything on your screen.\r\n\u201CI am learning C Programming. I am very excited.\r\nThis is my first time.\u201D",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n\t\/\/The following line prints the required sentences. \r\n\t\/\/The \\n is the new line charachter which pushes the line following it to\r\n\t\/\/a new line.\r\n\tprintf(\"I am learning C programming. I am very excited.\\nThis is my first time\");\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"The office in which you are working has decided to contribute a part of your salary towards a\r\nspecial fund contribution. Your contribution is calculated as the addition of 10% of your basic\r\npay and 5% of your Dearness Allowance (DA). Write a program to take input two integers as\r\nyour basic pay and as your DA and display the fund contribution.\r\nExample:\r\nInput: Basic Pay: 1000\r\nDA : 200\r\nOutput: Fund contribution: 110 (10% of 1000 + 5% of 200)",
                    "Answer":"#include<stdio.h>\r\nint main()\r\n{\r\n    float basic,da,c; \/\/declaring variables here\r\n    \r\n    printf(\"basic pay: \"); \/\/prompt user to input value\r\n    scanf(\"%f\",&basic);\/\/taking input for basic salary\r\n    \r\n    printf(\"DA: \"); \/\/prompt user to input value\r\n    scanf(\"%f\",&da);\/\/taking input for da\r\n    \r\n    c = (basic*0.1)+(da*0.05);\/\/calculating contribution and storing in variable c\r\n    \r\n    printf(\"\\nFund Contribution = %f (10%% of %f+ 5%% of %f)\",c,basic,da);\/\/printing the contribution\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Complex numbers are represented geometrically as a point in a 2D Argand plane, where the\r\nx-axis denotes the real part and the y-axis denotes the imaginary part. Take input one complex\r\nnumber from the keyboard. Hence reflect this complex number in the Argand plane with respect\r\nto the vertical y-axis.\r\n(a) Display the reflected complex number in the form \u201Ca + ib\u201D (i.e if the real part is 2 and the\r\nimaginary part is -5 then you should display \u201C2-i5\u201D on the screen).\r\n(b) Additionally, display the area enclosed by the rectangle between the horizontal x-axis (the\r\nreal axis) and the straight horizontal line connecting the two complex numbers, i.e the\r\noriginal and the reflected complex number. The other two sides of the rectangle are the\r\nvertical height of the imaginary part of the two complex numbers.\r\n[Hint: For input, maintain two separate variables, one denoting the real and the other\r\nimaginary part for one complex number. You can assume all integer variables.]",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/initialize the variables\r\n    \/\/x represents real part of the complex number\r\n    \/\/y is the imaginary part\r\n    \r\n    int x,y;\r\n    \r\n    printf(\"Enter the real part of the complex number:\"); \/\/prompt the user to enter the real part\r\n    scanf(\"%d\",&x); \/\/store the input in x\r\n\r\n    printf(\"Enter the imaginary part of the complex number:\"); \/\/prompt the user to enter the imaginary part\r\n    scanf(\"%d\",&y); \/\/store the input in y\r\n\r\n    printf(\"The original complex number is: %d+i%d \\n\",x,y);\r\n\r\n    \/\/after reflecting the complex number a+ib about the y axis,it becomes -a+ib\r\n    x=-x;\r\n    printf(\"After reflecting,the complex number is:%d+i%d \\n\",x,y);\r\n\r\n    \/* The area enclosed by the rectangle between the x-axis  and the straight horizontal line connecting the two complex numbers.\r\n     The other two sides of the rectangle are the vertical height of the imaginary part of the two complex numbers.*\/\r\n    \/*The length of the rectangle is 2x and breadth is y.*\/\r\n    \/*So area is 2*x*y.*\/\r\n\r\n    printf(\"the area of the required rectangle is=%d square units\",(2*x*y));\r\n\r\n    return 0;\r\n\r\n}"
                },
                {
                    "Question":"Given the base radius and total surface area (curved surface area + top circular area + bottom\r\ncircular area) of an enclosed right circular cylinder in cm, first calculate the height of the cylinder\r\n(in cm) and then find its volume (in cm3\r\n\r\n). Hence, calculate the cost of storing a perfume to fill\r\nexactly (2\/3)rd of the cylinder at an amount of Rs.10 per cubic centimeter and the remaining\r\nvolume is filled with Nitrogen gas at Rs.2 per cubic centimeter. Your input should be the radius\r\nand surface area of the cylinder (in cm and cm2\r\n\r\nrespectively) and you should display the height,\r\n\r\nvolume and the cost of storing the perfume with the Nitrogen gas.\r\nAssume,\r\n\u03C0 = 3.141\r\nCurved surface area of cylinder = 2*\u03C0*base radius*height\r\nVolume = \u03C0*radius2*height",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n \/\/declaring the variables\r\n float r,h,tsa,csa,vol,cost;\r\n\r\n \/\/input the base radius and the curved surface area\r\n printf(\"Enter the base radius\\n\");\r\n scanf(\"%f\",&r);\r\n\r\n printf(\"Enter the total surface area\\n\");\r\n scanf(\"%f\",&tsa);\r\n\r\n \/\/calculating curved surface area\r\n csa=tsa-(2*3.141*r*r);\r\n\r\n \/\/calculating the height\r\n h=csa\/(2*3.141*r);\r\n\r\n \/\/calculating volume of cylinder\r\n vol=3.141*r*h;\r\n\r\n \/\/calculating the cost of storing perfume\r\n cost=0.67*vol*10+0.33*vol*2;\r\n\r\n \/\/printing the results\r\n printf(\"Height:%1.3f\\n\",h);\r\n printf(\"Volume of the Cylinder:%1.3f\\n\",vol);\r\n printf(\"The Total Cost: Rs%1.2f\\n\",cost);\r\n\r\n return 0;\r\n}"
                },
                {
                    "Question":"If a five-digit number is taken as input through the keyboard, write a C program to print the\r\ndifference of the sum of the last three digits from the sum of the first two digits of the number.\r\nAlso use one single integer variable to generate the reverse of the last three digits and print\r\nthat single integer [Hint: Use positional notation for decimal numbers to generate the reverse\r\nnumber.].\r\nExample:\r\nInput:\r\n97321\r\nOutput:\r\nDifference = 10 (sum of (9,7) - sum of (3,2,1))\r\nReverse number = 123 (as a single integer)",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n\r\n{\r\n    int Number,n1,n2,n3,n4,n5,Diff; \/\/declaring variables\r\n\r\n    printf(\"Enter the 5 digit number:\\n\"); \/\/prompt the user to input values\r\n    scanf(\"%d\",&Number); \/\/capture and store input\r\n\r\n    \/\/calulations below\r\n    n1=floor(Number\/10000);\r\n    Number-=10000*n1;\r\n\r\n    n2=floor(Number\/1000);\r\n    Number-=1000*n2;\r\n\r\n    n3=floor(Number\/100);\r\n    Number-=100*n3;\r\n\r\n    n4=floor(Number\/10);\r\n    Number-=10*n4;\r\n\r\n    n5=Number;\r\n    Diff=n1+n2-(n3+n4+n5);\r\n\r\n    printf(\"Difference: %d\\n\",Diff);\r\n    printf(\"Reverse Number: %d%d%d\",n5,n4,n3);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Read three real numbers, i.e., a, b, and c, which represent the coefficients of a quadratic equation\r\nand display them in the exact form ax \u02C6 2 + bx + c = 0. Hence check whether the roots are\r\nreal, coincident, or complex according to the rules of quadratic equation and display it. No need\r\nto find out the roots separately. Additionally if the roots are complex, determine the quadrant\r\n(i.e 1st quadrant\/2nd quadrant\/3rd quadrant\/4th quadrant) of the 2D Argand plane in which\r\nthe first complex root of the form a + ib lies. Note that complex roots occur as conjugate pairs\r\na+ib and a\u2212ib, consider only the root in the form a+ib and determine in which quadrant it lies.\r\n\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\na:5\r\nb:2\r\nc:1\r\nOutput:\r\nEquation: 5x \u02C6 2 + 2x + 1 = 0\r\nRoots: Complex\r\nQuadrant of 1st complex root: 2nd [Reason: The first complex root is \u22120.2 + 0.4i as per the\r\ngiven example, hence it lies in the 2nd quadrant]\r\n\r\nExample2:\r\n(Please take the input and display the output as shown)\r\nInput:\r\na:1\r\nb:2\r\nc:-3\r\nOutput:\r\nEquation: x \u02C6 2 + 2x \u2212 3 = 0\r\nRoots: Real",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n\t\/\/Declaring coeffs of quadratic equation and discriminant\r\n\tfloat a,b,c;\r\n\tfloat d;\r\n\r\n\t\/\/Getting a,b,c from user\r\n\tprintf(\"a: \");\r\n\tscanf(\"%f\",&a);\r\n\tprintf(\"b: \");\r\n\tscanf(\"%f\",&b);\r\n\tprintf(\"c: \");\r\n\tscanf(\"%f\",&c);\r\n\r\n    \/\/Displaying the quadratic eqn as required\r\n    if(b<0 && c<0){\r\n        printf(\"%0.1fx^2 - %0.1fx - %0.1f = 0\\n\",a,-b,-c);\r\n    }\r\n    else if(b<0 && c>0){\r\n        printf(\"%0.1fx^2 - %0.1fx + %0.1f = 0\\n\",a,-b,c);\r\n    }\r\n    else if(b>0 && c<0){\r\n        printf(\"%0.1fx^2 + %0.1fx - %0.1f = 0\\n\",a,b,-c);\r\n    }\r\n    else{\r\n        printf(\"%0.1fx^2 + %0.1fx + %0.1f = 0\\n\",a,b,c);\r\n    }\r\n\r\n\r\n    \/\/calculating discriminant to find nature of roots\r\n\td = (pow(b,2)-4*a*c);\r\n\r\n    \/\/displaying input as per nature of \"d\"\r\n    if(d>0){\r\n        printf(\"\\nRoots: Real\\n\");\r\n        }\r\n    else if(d==0){\r\n        printf(\"\\nRoots: Coincident\\n\");\r\n    }\r\n    else if (d<0){\r\n        printf(\"\\nRoots: Complex\\n\");\r\n        float re = (float)(-b\/(2*a));\r\n        float im = (float)((sqrt(-d))\/(2*a));\r\n        \/\/first root => (-b\/2a)+i(sqrt(-d)\/2a), in this case taking -d to get real square root\r\n        \/\/Determining quadrant of root based on real and imaginary part of first root\r\n        if(re>=0 && im>0){\r\n            printf(\"Quadrant of 1st complex root: 1st\");\r\n        }\r\n        else if(re<0 && im>0){\r\n            printf(\"Quadrant of 1st complex root: 2nd\");\r\n        }\r\n        else if(re<0 && im<0){\r\n            printf(\"Quadrant of 1st complex root: 3rd\");\r\n        }\r\n        else if(re>=0 && im<0){\r\n            printf(\"Quadrant of 1st complex root: 4th\");\r\n        }\r\n    }\r\n\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"Steel is an alloy that is built of iron with typically a few tenths of a percent of carbon for im-\r\nproving its strength as well as fracture resistance in comparison to other forms of iron. Let us\r\n\r\nconsider that a certain grade of steel is graded as per the given condition:\r\nFirstly, the hardness of the steel should not be less than equal to 60. Secondly, the content of\r\nthe carbon in the steel should be greater than 0 and less than 0.65.\r\nFinally, strength of tensile must be greater than 6400\r\nThe grades are as follows: Grade is 10 - on satisfying all the three conditions\r\nGrade is 9 - on satisfying conditions (ii) and (iii)\r\nGrade is 8 - on satisfying conditions (i) and (ii)\r\nGrade is 7 - on satisfying conditions (i) and (iii) are satisfied\r\nGrade is 6 - if none of the conditions are satisfied\r\nGrade is 5 - if only one condition is satisfied\r\nWrite a program, to take the values of hardness, carbon content and tensile strength of the steel\r\nunder consideration as input from the user and output the grade of the steel. You can check for\r\nthe respective grade of the steel in the same order as given in the question.\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nHardness: 80\r\nCarbon content: 0.30\r\nTensile strength: 5000\r\nOutput:\r\nGrade: 8",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n\r\n    \/\/Declaring all required variables\r\n    int hardness,tensile;\r\n    float carbon;\r\n\r\n    \/\/Taking user input for 3 parameters\r\n    printf(\"Hardness: \");\r\n    scanf(\"%d\",&hardness);\r\n    printf(\"Carbon Content: \");\r\n    scanf(\"%f\",&carbon);\r\n    printf(\"Tensile Strength: \");\r\n    scanf(\"%d\",&tensile);\r\n\r\n\r\n    \/\/Displaying grade based on conditions satisfied\r\n    if (hardness>60 && carbon>0 && carbon<0.65 && tensile>6400){\r\n        printf(\"Grade: 10\");\r\n    }\r\n    else if(carbon>0 && carbon<0.65 && tensile>6400){\r\n        printf(\"Grade: 9\");\r\n    }\r\n    else if(hardness>60 && carbon>0 && carbon<0.65){\r\n        printf(\"Grade: 8\");\r\n    }\r\n    else if(hardness>60 && tensile>6400){\r\n        printf(\"Grade: 7\");\r\n    }\r\n    else if(hardness<60 && carbon>0.65 && tensile<6400){\r\n        printf(\"Grade: 6\");\r\n    }\r\n    else {\r\n        printf(\"Grade: 5\");\r\n    }\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"An aeroplane can travel at a speed of 700km\/h from a source A either eastwards or westwards.\r\nIf it travels east, the time advances at a rate of 1 hour per 500 km and if it travels west time\r\nrecedes back at the equal rate, with respect to the starting point A. Write a program to take\r\ninput i) the starting time of the aeroplane in hours and minutes only (you can consider 24 hour\r\nclock so 1PM becomes 13 hour 0 minutes), ii) the duration of the flight (you can assume the\r\nmaximum duration to be 6 hours) and iii) a character representing eastward or westward travel\r\n(like \u2018e\u2019 for eastwards and \u2018w\u2019 for westwards). Hence perform the following,\r\n\r\n(A) Check whether the starting time is a valid time or not. If the starting time is invalid, print\r\n\u201CError\u201D and you can exit from the program.\r\n(B) Depending on the duration of flight and eastward or westward direction of travel, display\r\nthe local time of arrival (i.e the local time at the arrival point) in the same 24 hour format.\r\nConsider the case of adjusting the time of arrival as per the standard 24 hour day format\r\nand take care of hour overflow (in case of eastward travel) or underflow (in case of westward\r\ntravel).\r\n(C) Also print \u201Csame day\u201D or \u201Cprevious day\u201D or \u201Cnext day\u201D depending on the day of arrival\r\nwith respect to the starting day\r\nAssume that the aeroplane travels in the given speed uniformly from source to destination. Also\r\nyou can assume all integer values.\r\n\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nStarting hour: 14\r\nStarting minute: 15\r\nDuration: 5\r\nDirection: e\r\nOutput:\r\nStarting time is valid\r\nArrival time hour: 21\r\nArrival time minute: 15\r\nArrival day: same day\r\n\r\nExample2:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nStarting hour: 26\r\nStarting minute: 15\r\nDuration: 6\r\nDirection: w\r\nOutput:\r\nStarting time is invalid",
                    "Answer":"\/\/Speed of airplane: 700km\/h\r\n#include<stdio.h>\r\n\r\nint main(){\r\n    \/\/Declaring required variables\r\n    int hr,min,duration,time_change,hr_change,min_change,day;\r\n    char dirn;\r\n    \/\/Taking user input for all parameters\r\n    printf(\"Starting hour: \");\r\n    scanf(\"%d\",&hr);\r\n    printf(\"Starting minute: \");\r\n    scanf(\"%d\",&min);\r\n    printf(\"Duration: \");\r\n    scanf(\"%d\",&duration);\r\n    printf(\"Direction: \");\r\n    scanf(\" %c\",&dirn);\r\n\r\n    if(hr<=0 && hr>24 && min<0 && min>60) {\r\n        printf(\"\\nStarting time is valid.\\n\");\r\n        \/\/700*duration will be distance, and every 500 km distance, time changes by 1hr\r\n        \/\/Also multiplying by 10 in order to get hr and min by modulus\r\n        time_change = ((70*duration)\/5);\r\n        min_change = (time_change%10)*6;\r\n        hr_change = (time_change-(time_change%10))\/10;\r\n        \/\/this time change is incremented in case of e and decremented in case of w\r\n\r\n        if(dirn=='e'){\r\n            hr+=hr_change;\r\n            min+=min_change;\r\n            \/\/Adjusting min and\/or hr in case of overflow\r\n            \/\/\"day\" variable used to keep track of which day (-1 => previous day, 0=> same day,1=> next day)\r\n            if (min>=60){\r\n                min=min-60;\r\n                hr+=1;\r\n            }\r\n            else{\r\n                min=min;\r\n            }\r\n            if (hr>=24){\r\n                hr=hr-24;\r\n                day=1;\r\n            }\r\n            else{\r\n                day=0;\r\n            }\r\n            }\r\n        else if(dirn=='w'){\r\n            hr-=hr_change;\r\n            min-=min_change;\r\n            \/\/Adjusting min and\/or hr in case of underflow\r\n            if (min<0){\r\n                min=min+60;\r\n                hr-=1;\r\n            }\r\n            else{\r\n                min=min;\r\n            }\r\n            if (hr<0){\r\n                hr=hr+24;\r\n                day= -1;\r\n            }\r\n            else{\r\n                day=0;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        printf(\"Arrival time hour: %d\\n\",hr);\r\n        printf(\"Arrival time minute: %d\\n\",min);\r\n\r\n        switch(day){\r\n        case -1:\r\n            printf(\"Arrival day: previous day\\n\");\r\n            break;\r\n        case 0:\r\n            printf(\"Arrival day: same day\\n\");\r\n            break;\r\n        case 1:\r\n            printf(\"Arrival day: next day\\n\");\r\n            break;\r\n        }\r\n    }\r\n    else{\r\n        printf(\"Starting time is invalid.\\n\");\r\n    }\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question":"The litres of fuel sold on a day depends on which day of the week it is. Consider Monday as\r\nDay 1, Tuesday as Day 2, ....., Sunday as Day 7. Let s be the number litres of fuel sold on a day\r\nand v be the number of vehicles sighted on that day across the highway. The number of litres\r\ncan also be a fraction.\r\n\r\n(A) For Monday, s is given by one-third of the number of vehicles sighted in the highway across,\r\ni.e v\r\n(B) For Wednesday, s is 2v\/7, rounded off to the nearest lower integer.\r\n(C) For Tuesday, Thursday, and Friday, s is v\r\n2 + 2v\r\n\r\n(D) For the weekends, s is thrice the formula as that used for Tuesday\r\nTake the day (1 to 7) and v as input and calculate the amount of fuel sold s on that day, and\r\ndisplay it. Also calculate the total price of the fuel sold on that day by assuming that the price\r\nof fuel = Rs 120\/litre and the GST on the fuel as 25% on the base price. You HAVE to use\r\n\u2018switch-case\u2019 for this question.\r\n\r\nExample:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nDay: 3\r\nVehicles sighted: 100\r\nOutput:\r\nFuel sold \u2018s\u2019: 28\r\nTotal price: 4200\r\n[Reason: 28*120 + 25% GST on (28*120)]",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\nfloat s,price,GST; \/\/  declaring variables\r\nint v,day;         \/\/declaring variables  \r\nprintf(\"give the value of day in which you want to calculate the required value of question\\n\"); \r\nprintf(\"Consider Monday as Day 1, Tuesday as Day 2, ....., Sunday as Day 7\\n\");\r\nscanf(\"%d\",&day); \/\/taking value from keyboard\r\n\r\nswitch(day){\r\n    case 1: printf(\"the day is Monday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);      \/\/taking the value of day from keyboard\r\n            s=v*0.33333;         \/\/calculating amount of litres according to question\r\n            printf(\"the amount of fuel sold on that day is %f litres \\n\",s);\r\n            price=(s*120)*1.25; \/\/calculating price according to queston\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;              \/\/breaking the switch so that it dosent run further.\r\n\r\n    case 2: printf(\"the day is Tuesday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 3: printf(\"the day is Wednesday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=floor((2*v)*0.142857); \/\/it was only mentioned to give the lowest nearest integer for wednesday or else i would have added floor to every output.\r\n            printf(\"the amount of fuel sold on that day is %3.0f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 4: printf(\"the day is Thursaday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 5: printf(\"the day is Friday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 6: printf(\"the day is Saturday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=3*(pow(v,2)+2*v);\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 7: printf(\"the day is Sunday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=3*(pow(v,2)+2*v);\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n    default: printf(\"Such day dosent exist on earth, Please find a different planet......XD\");\r\n             break;\r\n\r\n}\r\n\/\/THANK YOU HAVE A GOOD DAY!\r\n\r\n\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question": "Write a C program that will read the number of Kilometers travelled by a bike in a \r\nfloat type variable d, it will also read the liters of Petrol used and store in float \r\ntype variable f. It will then print the average fuel consumption Kilometers\/Liters \r\nup to two decimal places.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float d, f, avg;\r\n    printf(\"Please enter the number of Kilometres travelled by the bike:\\n\");\r\n    scanf(\"%f\",&d);\r\n    printf(\"Please enter the litres of Petrol used by the bike:\\n\");\r\n    scanf(\"%f\",&f);\r\n    avg=d\/f;\r\n    printf(\"The average fuel consumption of the bike is: %.2f Kilometres\/litre\\n\",avg);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program that will do the following:\r\ni. Read a temperature value in Fahrenheit scale from the keyboard in a variable F\r\nii. Convert the temperature value to its corresponding value in Centigrade scale \r\nand store it in a variable C\r\niii. Print the value of C in the display\r\n\r\nNote: the temperature values are real numbers. Also, they can be positive, \r\nnegative, or 0.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float C,F;\r\n    printf(\"Please enter the temperature value in Fahrenheit scale:\\n\");\r\n    scanf(\"%f\",&F);\r\n    C=(F-32)*5.0\/9.0;\r\n    printf(\"The temperature in Celsius scale is: %f C\\n\",C);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads the total number of days and finds out the \r\nnumber of years, weeks and days. Ignore leap year. A year has 365 days, and \r\nthe week has 7 days.\r\n\r\nExample Test Data :\r\nNumber of days: 1329\r\nExpected Output :\r\nYears: 3\r\nWeeks: 33\r\nDays: 3",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int days, years, days2, days3, weeks;\r\n    printf(\"Please enter the number of days:\\n\");\r\n    scanf(\"%d\",&days);\r\n    years= days\/365;\r\n    days2=days%365;\r\n    weeks=days2\/7;\r\n    days3=days2%7;\r\n    printf(\"Years: %d\\n\",years);\r\n    printf(\"Weeks: %d\\n\",weeks);\r\n    printf(\"Days: %d\\n\",days3);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads the marks of a student in Physics, Chemistry, and Mathematics, \nand stores them in integer variables p, c, m. \nThe program should print (Eligible\/Not Eligible) based on \nthe following eligibility criteria for admission to a degree course:\r\nMarks in Maths >=65\r\nMarks in Phy >=55\r\nMarks in Chem>=50\r\nTotal in all three subject >=190 or Total in Math and Physics >=140",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int p,c,m;\r\n    printf(\"Please enter the marks in Physics:\\n\");\r\n    scanf(\"%d\",&p);\r\n    printf(\"Please enter the marks in Chemistry:\\n\");\r\n    scanf(\"%d\",&c);\r\n    printf(\"Please enter the marks in Mathematics:\\n\");\r\n    scanf(\"%d\",&m);\r\n\r\n    if (m>=65 && p>=55 && c>=50 && ((p+c+m)>=190 || (m+p)>=140))\r\n    {\r\n        printf(\"Eligible\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Not Eligible\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to read the coordinates (x, y) (in Cartesian system) (float \r\nvalues) of a point and find the quadrant to which it belongs (Quadrant -I, \r\nQuadrant -II, Quadrant -III, Quadrant -IV). Assume that the point does not lie on \r\nany of the axes. The quadrants are numbered from 1st to 4th as follows: (where \r\nthe signs of the (x, y) coordinates are I(+,+), II (\u2212,+), III (\u2212,\u2212), and IV (+,\u2212)",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float x,y;\r\n    printf(\"Please enter the x coordinate:\\n\");\r\n    scanf(\"%f\",&x);\r\n    printf(\"Please enter the y coordinate:\\n\");\r\n    scanf(\"%f\",&y);\r\n\r\n    \/\/it is given that the point does not lie on any axes\r\n\r\n    if (x>0)\r\n    {\r\n        if (y>0) \/\/both x and y are +\r\n        {\r\n           printf(\"The point lies in Quadrant 1.\\n\");\r\n        }\r\n        else \/\/x is +, y is -\r\n        {\r\n            printf(\"The point lies in Quadrant 4.\\n\");\r\n        }\r\n\r\n    }\r\n    else if (y>0) \/\/x is - and y is +\r\n    {\r\n        printf(\"The point lies in Quadrant 2.\\n\");\r\n    }\r\n    else \/\/ both x and y are -\r\n        {\r\n            printf(\"The point lies in Quadrant 3.\\n\");\r\n        }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program that reads the length (integers) of three sides of a triangle \r\n(variables a, b, c) and prints whether a triangle is Equilateral, Isosceles or Scalene.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int a,b,c;\r\n    printf(\"Please enter the lengths of sides of the triangle:\\n\");\r\n    scanf(\"%d%d%d\",&a,&b,&c);\r\n\r\n    if (a==b && b==c)\r\n    {\r\n        printf(\"It is an Equilateral Triangle.\\n\");\r\n    }\r\n    else if (a==b || b==c || c==a)\r\n        {\r\n            printf(\"It is an Isosceles Triangle.\\n\");\r\n        }\r\n    else\r\n    {\r\n        printf(\"It is a Scalene Triangle.\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Compute the perimeter of a triangle given its coordinates of its three\r\nvertices (to be read).\r\nInput data set (coordinates of three vertices of a triangle)\r\n\r\n(i) (10,5), (-5,3), (2,2)\r\n(ii) (1,2), (5,5), (7,6.5)\r\n(iii) (0,0,), (5,0), (2.5, 5)",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nfloat distance(float x1,float y1,float x2,float y2)\r\n{\r\n    float c;\r\n    c=sqrt(pow((x2-x1),2)+pow((y2-y1),2));\r\n\r\n    return c;\r\n}\r\n\r\nint main()\r\n{\r\n    float x1,x2,x3,y1,y2,y3,ans;\r\n\r\n    printf(\"Enter the co-ordinates of the first point.\\n\");\r\n    scanf(\" %f %f\",&x1,&y1);\r\n\r\n    printf(\"Enter the co-ordinates of the second point.\\n\");\r\n    scanf(\" %f %f\",&x2,&y2);\r\n\r\n    printf(\"Enter the co-ordinates of the third point.\\n\");\r\n    scanf(\" %f %f\",&x3,&y3);\r\n\r\n    ans=distance(x1,y1,x2,y2)+distance(x2,y2,x3,y3)+distance(x3,y3,x1,y1);\r\n\r\n    printf(\"The perimeter of the triangle is %.2f.\\n\",ans);\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "Compute the compound interest of a principal amount p (to be read) at an\r\n                    interest rate of 5.5% for n (to be read) years.\r\n                    Input data set:\r\n                    (i) p=10000, n=4\r\n                    (ii) p=4563, n=3",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    float p;\r\n    float n;\r\n\r\n    printf(\"Enter the principle amount.\\n\");\r\n    scanf(\"%f\",&p);\r\n    printf(\"Enter the number of years.\\n\");\r\n    scanf(\"%f\",&n);\r\n\r\n    float sum=p*pow(1.055,n);\r\n    float interest=sum-p;\r\n\r\n    printf(\"The interest is %.2f.\",interest);\r\n\r\n    return 0;\r\n}"
                },{
                    "Question": "Consider a resistive circuit (shown in a Figure overleaf) where a\r\nresistance R1 is connected with two resistances R2 and R3 connected in parallel.\r\nA D.C. source E is applied across this load. Compute the power dissipated in\r\neach resistance, and the total power consumed by the circuit. Assume the values\r\nof resistance given in ohm, power source in Volt, and power should be\r\nexpressed in Watt. Write a program which will read the values of resistances\r\nand power source and print the results (as asked) of the computation.\r\n\r\n(i) R1=5 KW, R2=10 KW, R3=20 KW, E=50 V\r\n(ii) R1=15 KW, R2=7 KW, R3=8 KW, E=12 V",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    float r1,r2,r3,e;\r\n    printf(\"Enter the values of R1,R2 and R3.\\n\");\r\n    scanf(\"%f%f%f\",&r1,&r2,&r3);\r\n    printf(\"Enter the power source E.\\n\");\r\n    scanf(\"%f\",&e);\r\n\r\n    float rp=(r2*r3)\/(r2+r3);\r\n    float R=r1+rp;\r\n    float i=e\/R;\r\n\r\n    printf(\"The power consumed in R1 is %f.\\n\",i*i*r1);\r\n    printf(\"The power consumed in R2 is %f.\\n\",((r3*i)\/(r2+r3))*((r3*i)\/(r2+r3))*r2);\r\n    printf(\"The power consumed in R3 is %f.\\n\",((r2*i)\/(r2+r3))*((r2*i)\/(r2+r3))*r3);\r\n    printf(\"The power consumed in the circuit is %f.\\n\",i*i*R);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C-program which evaluates the value of the following\r\nfunction as given below for an input real number x (to be read):\r\nf(x)= x\r\n4\r\n-36x3\r\n+4x-3\r\n\r\nThe program also computes the sign of the derivative of the\r\nfunction (f\u2019(x)). If the derivative is positive, it prints \u20181\u2019. If it is\r\nnegative, prints \u2018-1\u2019. Otherwise, it prints \u20180\u2019. Run your program to\r\nprovide results for the following input numbers.\r\n-5.4, 2.4, 3.0, 5.0, and 38.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    float a;\r\n    printf(\"Enter the value of x.\\n\");\r\n    scanf(\"%f\",&a);\r\n    printf(\"%.1f\\n\",a);\r\n    float ans=pow(a,4)-36*pow(a,3)+4*a-3;\r\n    printf(\"The value of f(x) at x=%.1f is %.1f.\\n\",a,ans);\r\n\r\n    float der=4*pow(a,3)-108*pow(a,2)+4;\r\n    if(der>0){\r\n        printf(\"1\\n\");\r\n    }\r\n    else if(der<0){\r\n        printf(\"-1\\n\");\r\n    }\r\n    else{\r\n        printf(\"0\\n\");\r\n    }\r\n\r\n    return 0;\r\n}"
                },{
                    "Question": "Write a C-program which takes three distinct points (in 2-D\r\ncoordinates) as inputs and checks whether they form a triangle or\r\nstraight line. If they form a triangle, it prints \u201CFormed triangle\u201D and\r\nprints its area. If they form a straight line, it prints \u201CFormed Straight\r\nLine\u201D and prints the length between two end points. If any pair of\r\npoints are non-distinct, it prints coordinates of that point, and notifies\r\n\u201CNon-distinct input point\u201D and prints the length between two distinct\r\npoints, if any.\r\n\r\nProvide results for the following coordinate points:\r\n(2,3), (4,5), (10,23)\r\n(1,2), (4,8), (9,18)\r\n(0,0), (1,3), (1,3)",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nfloat dist(int x1,int y1,int x2,int y2){\r\n    float d=sqrt(pow((float)(x1-x2),2)+pow((float)(y1-y2),2));\r\n    return d;\r\n}\r\n\r\nfloat area(int x1,int y1,int x2,int y2,int x3,int y3){\r\n    float ar=0.50*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\r\n    if (ar>=0){\r\n        return ar;\r\n    }\r\n    return ar*(-1);\r\n}\r\n\r\nint main(){\r\n\r\n    int x1,x2,x3,y1,y2,y3;\r\n\r\n    printf(\"Enter the coordinate of the first point:\\n\");\r\n    scanf(\"%d%d\",&x1,&y1);\r\n    printf(\"%d %d\\n\",x1,y1);\r\n\r\n    printf(\"Enter the coordinate of the second point:\\n\");\r\n    scanf(\"%d%d\",&x2,&y2);\r\n    printf(\"%d %d\\n\",x2,y2);\r\n\r\n    printf(\"Enter the coordinate of the third point:\\n\");\r\n    scanf(\"%d%d\",&x3,&y3);\r\n    printf(\"%d %d\\n\",x3,y3);\r\n\r\n    if((x1==x2 && y1==y2) || (x2==x3 && y2==y3) || (x3==x1 && y3==y1)){\r\n        printf(\"Non-distinct input point\\n\");\r\n        float max;\r\n        max=dist(x1,y1,x2,y2);\r\n        if(max<dist(x2,y2,x3,y3)){\r\n            max=dist(x2,y2,x3,y3);\r\n        }\r\n        if(max<dist(x3,y3,x1,y1)){\r\n            max=dist(x3,y3,x1,y1);\r\n        }\r\n        if(max!=0){\r\n            printf(\"Distance between distinct points: %.2f\\n\",max);\r\n        }\r\n    }\r\n    else{\r\n        float ar=area(x1,y1,x2,y2,x3,y3);\r\n\r\n        if(ar==0){\r\n            printf(\"Formed Straight Line\\n\");\r\n            float max;\r\n            max=dist(x1,y1,x2,y2);\r\n            if(max<dist(x2,y2,x3,y3)){\r\n                max=dist(x2,y2,x3,y3);\r\n            }\r\n            if(max<dist(x3,y3,x1,y1)){\r\n                max=dist(x3,y3,x1,y1);\r\n            }\r\n            printf(\"Distance between end points: %.2f\\n\",max);\r\n        }\r\n        else{\r\n            printf(\"Formed triangle \\n Area of the triangle is %.2f\\n\",ar);\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                    
                },{
                    "Question":"Write a C-program and implement the function given in the\r\nfollowing diagram.\r\n\r\nProvide functional values at the following values of x\r\nx= 5, 15, 25, 40, and 60.\r\n\r\nN.B. All your programs may be tested by other input values.",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    float x;float ans;\r\n    printf(\"Enter the value of x:\\n\");\r\n    scanf(\"%f\",&x);\r\n    printf(\"%.2f\\n\",x);\r\n\r\n    if(x>50 || x<0){\r\n        printf(\"x is out of domain.\\n\");\r\n        return 0;\r\n    }\r\n\r\n    if(x>=0 && x<=10){\r\n        ans=x;\r\n    }\r\n    else if(x>10 && x<30){\r\n        ans=sqrt(40*x-x*x-200)+20;\r\n    }\r\n    else if(x>=30 && x<=50){\r\n        ans=25-x\/2;\r\n    }\r\n\r\n    printf(\"The value of f(x) is %.2f.\\n\",ans);\r\n\r\n    return 0;\r\n}"
                }
             ]}
             ]
        
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is the output of the following C program when the input N is the number formed by the last \r\ntwo digits of your roll number? Explain the execution.\r\n\r\n#include <stdio.h> \r\nint main() {\r\n     int x, N;\r\n     scanf(\"%d\", &N);\r\n     printf(\"%d\\n\", N); \r\n     N \/= 2;\r\n     x = (N>15) ? (N=4): (N=12);\r\n     if (x < 10) \r\n            if (x < 15) printf(\"A\");\r\n     else printf(\"B\");\r\n     printf(\"C\");\r\n}",
                    "Answer": "Let input is 22. N\/=2 gives a value of N = 11\r\nNow for the statement x = (N>15)? (N=4):(N=12) as 11>15 is false N becomes 12 also x is 12\r\nNow x<10 is false. So the if (nested) and the linked else is not executed. So the output is:\r\n22\r\nc"
                },
                {
                    "Question": "Write a program that reads the volume, V, as a floating-point number. It then computes and prints \r\nthe radius of a sphere having volume V, and then computes and prints the height of a cylinder \nhaving the same radius and the same volume V. You may use math library functions if necessary. \r\n",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    float v;\r\n    double r,h;\r\n    printf(\"Enter the volume of sphere: \");\r\n    scanf(\"%f\",&v);\r\n    r = pow((3\/(4.0*(22\/7.0))) * (double)v, (1.0\/3.0));\r\n    printf(\"Radius = %lf\\n\", r);\r\n    h = v\/((22\/7.0) * pow(r, 2.0));\r\n    printf(\"Height of the cylinder: %lf\\n\", h);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "The following C program aims to print the number of days from the date 1-1-y to the date 1-m-y, \r\nwhere yis a positive integer representing a year and m is an integer in the range 1 to 12 representing month. \nThe count should include 1-1-y but exclude 1-m-y. \nUnfortunately, the student who wrote this program made some mistakes. \nRearrange the lines of code so that it fulfils its objective correctly. Do not add any new statement. \nDo not modify any arithmetic. Explain why the rearranged code is correct.\r\n\r\n#include<stdio.h>\r\nint main(){\r\n    int days=0, is leap;\r\n    int m, y;\r\n    printf(\"Enter a month and year: \"); \r\n    scanf(\"%d %d\", &m, &y); \r\n    if ((m < 1) || (m >12) || (y < 1)) { \r\n        printf(\"Invalid input! \\n\");\r\n        return 1; \r\n    }\r\n\r\n    \/\/ adding an extra day if the year is leap\r\n    is_leap = (m>=3 && ( (y%4 == 0 && y%100 != 0) il y%400 == 0));\r\n    days= (is_leap)? (days+1):days;\r\n\r\n    switch (m) { \r\n        case 2: days+=31;\r\n        case 3: days += 28;\r\n        case 4: days += 31;\r\n        case 5: days += 30;\r\n        case 6: days += 31;\r\n        case 7: days += 30;\r\n        case 8: days += 31;\r\n        case 9: days += 31;\r\n        case 10: days += 30;\r\n        case 11: days += 31;\r\n        case 12: days += 30;\r\n    }\r\n\r\n    printf(\"Number of days between 1-1-%d and 1-%d-%d = %d\\n\", y, m, y, days);\r\n    return 0; \r\n}",
                    "Answer": "For the given code to work we will rearrange the switch case statements. As there is no break\r\nstatement, if a case is satisfied the no. of days go of adding of even the unrequired months. So the switch\r\ncase is to be written as :\r\n\r\nswitch(m) {\r\n          case 12: days+=30;\r\n          case 11: days+=31;\r\n          case 10: days+=30;\r\n          case 9: days+=31;\r\n          case 8: days+=31;\r\n          case 7: days+=30;\r\n          case 6: days+=31;\r\n          case 5: days+=30;\r\n          case 4: days+=31;\r\n          case 3: days+=30;\r\n          case 2: days+=31;\r\n       }"
                },
                {
                    "Question":"Consider the following program.\r\nint main() {\r\nint a = 13, b = 5, c = 7;\r\nfloat x; int y; char z;\r\nx = 4*4\/3*a\/b;\r\nprintf(\"X=%3.2f\",x);    (A)\r\ny = 3.0*b\/c\/a;\r\nprintf(\"Y = %d\",y);    (B)\r\na += a*a%2; a %= 2;\r\n(a)? printf(\"Good\") : printf(\"Nice\");    (C)\r\nreturn (0);\r\n}\r\nWhat value the program will print at (A), (B) and (C)?\r\n",
                    "Answer":" (A) X= 13.00\r\n(B) Y= 0\r\n(C) Nice\r\n"
                },
                {
                    "Question": "Write a program that reads three points, (x1, y1), (x2, y2), and (x3, yy3) and determines \nwhether they represent the vertices of a right-angled triangle. If so, \nthe program must identify the hypotenuse, and print the value of one of the angles in radians. \nYou may use appropriate library functions, but please include the necessary header files. \nYour program should have only the main() function.",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n{\r\n    int x1, y1, x2, y2, x3, y3;\r\n    printf(\"Enter coordinates of points: \\n\");\r\n    scanf(\"%d %d %d %d %d %d\", &x1, &y1, &x2, &y2, &x3, &y3);\r\n    \/\/ math -check lenght fo each side if a2 +b2 = c2\r\n    \/\/ c is hypotenuse\r\n\r\n    int a, b, c;\r\n    a = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    b = sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));\r\n    c = sqrt((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1));\r\n\r\n    if (c > b && c > a)\r\n    {\r\n        if (a * a + b * b == c * c)\r\n        {\r\n            printf(\"The hypotenuse is side between points 1 and 3, length %lf\", c);\r\n            printf(\"One angle is %lf\", asin((double)a \/ c));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right-angled triangle\");\r\n        }\r\n    }\r\n    else if (b > c && b > a)\r\n    {\r\n        if (c * c + a * a == b * b)\r\n        {\r\n            printf(\"Hypotenuse is between points 2 and 3, length %lf\", b);\r\n            print(\"One angle is %lf\", asin(a \/ b));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right angled triangle\");\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (b * b + c * c == a * c)\r\n        {\r\n            printf(\"Hypotenuse is between points 1 and 2, length %lf\", a);\r\n            printf(\"One angle is %lf\", asin(b \/ a));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right angled triangle\");\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"A giant is a person who is simultaneously the tallest and heaviest among a set of people. \nWrite a program that, given the heights and weights of 3 people (h1, h2, h3, W1, W2, W3), \noutputs whether any of them is a giant. The i-th person is a giant if h, 2 h, and w, >w, \nfor all je {1,2,3}, ji. Assume all heights and weights are positive floating point numbers. \nYour program should use only the ternary conditional operator?: and contain no if-else statements. \nYour program should have only the main() function. Do not use any library functions other than standard input and output.\n\nSample Output \n1 Heights of persons 1,2,3 : 4.5 5.8 5.7\n Weights of persons 1,2,3 : 50 90 100 There is no giant.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    float h1, h2, h3, w1, w2, w3;\r\n    int check = 0;\r\n    printf(\"Heights of persons 1,2,3: \");\r\n    scanf(\"%f %f %f\", &h1, &h2, &h3);\r\n    printf(\"Weights of persons 1,2,3: \");\r\n    scanf(\"%f %f %f\", &w1, &w2, &w3);\r\n\r\n    (h1 >= h2 && h1 >= h3 && w1 >= w2 && w1 >= w3) ? (check = 1) : (check = 0);\r\n\r\n    (h2 >= h1 && h2 >= h3 && w2 >= w1 && w2 >= w3) ? (check = 2) : (check = 0);\r\n\r\n    (h3 >= h1 && h3 >= h2 && w3 >= w1 && w3 >= w2) ? (check = 2) : (check = 0);\r\n\r\n    (check) ? (printf(\"Person %d is giant\", check)) : (printf(\"No giant exists\"));\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to compute and print the mean and variance of \n3n integers read 3 at a time. The program must read n and then the n triples sequentially \nusing only a constant number of variables, no arrays. After reading a triple, \nthe program must print the mean and variance for that triple. After all 3n integers are read, \nthe program should print the mean and variance of all the integers. \nThere should be only one main() function and no other function.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    int a,b,c,n;\r\n    float sum=0,sqr=0;\r\n    printf(\"Enter n:\");\r\n    scanf(\"%d\",&n);\r\n    for(int i=0; i<n,i++){\r\n        printf(\"Enter triplet\");\r\n        scanf(\"%d%d%d\",&a,&b,&c);\r\n        sum+ =a+b+c;\r\n        sqr+ =a*a+b*b+c*c;\r\n        printf(\"Mean of 3:%lf\",(a+b+c)\/3.0);\r\n        printf(\"\\nVariance of 3:%lf\",(a*a+b*b+c*c)\/3.0 - (a+b+c)*(a+b+c)\/9.0);\r\n        printf(\"Mean of all:%lf\",sum\/(3*n));\r\n        printf(\"\\nVariance of all:%lf\",sqr\/(3*n)-sum*sum\/(9*n*n));\r\n        return 0;\r\n    }\r\n\r\n}"
                } 
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Define a structure Player that will contain the following information of a cricket player (assume that\r\nthey are all currently playing): players name, country, date of birth, date of debut first class match,\r\nnumber of tests played, number of one day internationals (ODIs) played, number of centuries\r\nscored, number of half centuries scored, total runs scored in tests, total runs made in ODIs, number\r\nof wickets taken in test cricket, number of wickets taken in ODIs, etc. (you may add some more\r\nfields).\r\n2. Write a menu-based program to do the following to a list L of n elements of type Player. You may\r\ndecide how to store the list L, and you may store L in more than one data structures if required:\r\n    i) Given a list of Players, sort the structures according to the dictionary order of the player\r\n       names.\r\n       Take an input integer as the new number of elements for the list. If the new number is larger\r\n       than the old number by m, then the data of m new players have to be inserted and the final\r\n       list should be in dictionary order of the player names.\r\n       If the new size is less than the old size by m, then the last m player information have to be\r\n       deleted.\r\n       If the new size is equal to the old size, then no changes are needed.\r\n   ii) Write a recursive function to take as input a positive integer, and return the number of players\r\n       who have played at least those many one day internationals.\r\n   iii) Write a function to take as input a positive integer, and print the number of players who have\r\n       played at least those many one day internationals.\r\n  iv) Print (with proper indentation) the current list sorted in dictionary order of player names.\r\n       Depending on what is chosen by the user, the required operation is executed by the main function.\r\n\r\nYou can write your own functions wherever necessary, but proper commenting is required to explain\r\nthe purpose of the function.\r\nAlways minimize the time complexity of the program. Keep in mind that the list can be edited at any\r\ntime and may require recomputation unless stored smartly.\r\nFunctions from string.h can be used.",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n\/\/declaring the player structure with its members\r\nstruct Player {\r\n    char name[100];\r\n    char country[100];\r\n    char dob[9];\r\n    char date_debut[9];\r\n    int n_tests;\r\n    int n_odi;\r\n    int n_cent;\r\n    int n_half_cent;\r\n    int tot_test;\r\n    int tot_odi;\r\n    int wicket_test;\r\n    int wicket_odi;\r\n    struct Player* next;\r\n};\r\n\r\n\/\/function to take input new number of players in the list and modifying the list accordingly\r\nstruct Player* input(struct Player* r){\r\n    int k;\r\n    printf(\"Enter the new number of elements of the list: \");\r\n    scanf(\"%d\",&k);\r\n    int n = 0; \/\/n stores the number of elements in the original list\r\n    struct Player* p = r;\r\n    \/\/calculating n\r\n    while(p!=NULL){\r\n        n++;\r\n        p = p->next;\r\n    }\r\n\r\n    \/\/checking if elements need to be added or deleted\r\n    if(k>n){\r\n        \/\/if we need addition\r\n        printf(\"Enter the new elements:\\n\");\r\n        for(int i=0;i<k-n;i++){\r\n            \/\/new node\r\n            struct Player* node = (struct Player*) malloc(sizeof(struct Player));\r\n            printf(\"\\n\");\r\n            \/\/taking input new player details\r\n            printf(\"Enter the name of the player : \");\r\n            scanf(\"%s\", node->name);\r\n            printf(\"Enter the country of the player : \");\r\n            scanf(\"%s\", node->country);\r\n            printf(\"Enter the date of birth of the player : \");\r\n            scanf(\"%s\", node->dob);\r\n            printf(\"Enter the date of debut first class match of the player : \");\r\n            scanf(\"%s\", node->date_debut);\r\n            printf(\"Enter the number of tests played by the player : \");\r\n            scanf(\"%d\", &(node->n_tests));\r\n            printf(\"Enter the number of one day internationals (ODIs) played by the player : \");\r\n            scanf(\"%d\", &(node->n_odi));\r\n            printf(\"Enter the number of centuries scored by the player : \");\r\n            scanf(\"%d\", &(node->n_cent));\r\n            printf(\"Enter the number of half centuries scored the player : \");\r\n            scanf(\"%d\", &(node->n_half_cent));\r\n            printf(\"Enter the total runs scored in tests by the player : \");\r\n            scanf(\"%d\", &(node->tot_test));\r\n            printf(\"Enter the total runs made in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->tot_odi));\r\n            printf(\"Enter the number of wickets taken in test cricket by the player : \");\r\n            scanf(\"%d\", &(node->wicket_test));\r\n            printf(\"Enter the number of wickets taken in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->wicket_odi));\r\n            if(r==NULL){\r\n                \/\/if this node is the first node\r\n                r = node;\r\n                r->next = NULL;\r\n            }else{\r\n                p = r;\r\n                struct Player* prev;\r\n                while(p!=NULL){\r\n\r\n                    \/\/changing upperCase to lowerCase for comparison\r\n                    char name1[100];\r\n                    char name2[100];\r\n                    int i = 0;\r\n                    while(p->name[i]!='\\0'){\r\n                        if(p->name[i] >='A' && p->name[i]<='Z'){\r\n                            name1[i] = p->name[i]-'A'+'a';\r\n                        }else{\r\n                            name1[i] = p->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name1[i] = '\\0';\r\n                    i = 0;\r\n                    while(node->name[i]!='\\0'){\r\n                        if(node->name[i] >='A' && node->name[i]<='Z'){\r\n                            name2[i] = node->name[i]-'A'+'a';\r\n                        }else{\r\n                            name2[i] = node->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name2[i] = '\\0';\r\n                    if(strcmp(name1, name2)>0){\r\n                        break;\r\n                    }\r\n                    prev = p;\r\n                    p = p->next;\r\n                }\r\n                \/\/new node needs to added between prev and p\r\n                if(p==r){\r\n                    \/\/addition at start\r\n                    r = node;\r\n                    r->next = p;\r\n                }else if(p==NULL){\r\n                    \/\/addition at end\r\n                    prev->next = node;\r\n                    node->next = NULL;\r\n                }else{\r\n                    \/\/addition in between\r\n                    prev->next = node;\r\n                    node->next = p;\r\n                }\r\n            }\r\n        }\r\n    }else if(k<n){\r\n        \/\/deleting extra nodes at the end\r\n        int counter = 0;\r\n        struct Player* prev;\r\n        p = r;\r\n        while(counter!=k){\r\n            prev = p;\r\n            p = p->next;\r\n            counter++;\r\n        }\r\n        while(prev->next!=NULL){\r\n            prev->next = p->next;\r\n            free(p);\r\n            p = prev->next;\r\n        }\r\n        printf(\"Done deleting extra player records\\n\");\r\n    }else{\r\n        printf(\"The list already contains this many players\\n\");\r\n    }\r\n    return r;\r\n}\r\n\r\n\/\/this function counts required ODIs more than or equal to n\r\nint one_day_counter(int n, struct Player* node, int odi){\r\n    if(node!=NULL){\r\n        if(node->n_odi >= n){\r\n            return(one_day_counter(n, node->next, odi+1)); \/\/recursive call with odi+1\r\n        }\r\n        return(one_day_counter(n, node->next, odi));\r\n    }\r\n    return odi;\r\n}\r\n\r\n\/\/this function calls the previous one and just prints the value\r\nvoid one_day_printer(int n, struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The number of players who have played atleast %d one day internationals are: %d\\n\", n, one_day_counter(n,p,0));\r\n}\r\n\r\n\/\/this function prints details of all players\r\nvoid printer(struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The player informations are:\\n\\n\");\r\n    while(p!=NULL){\r\n        printf(\"The name of the player is: %s\\n\", p->name);\r\n        printf(\"The country of the player is: %s\\n\", p->country);\r\n        printf(\"The date of birth of the player is: %s\\n\", p->dob);\r\n        printf(\"The date of debut first class match of the player is: %s\\n\", p->date_debut);\r\n        printf(\"The number of tests played by the player is: %d\\n\", p->n_tests);\r\n        printf(\"The number of one day internationals (ODIs) played by the player is: %d\\n\", p->n_odi);\r\n        printf(\"The number of centuries scored by the player is: %d\\n\", p->n_cent);\r\n        printf(\"The number of half centuries scored the player is: %d\\n\", p->n_half_cent);\r\n        printf(\"The total runs scored in tests by the player is: %d\\n\", p->tot_test);\r\n        printf(\"The total runs made in ODIs by the player is: %d\\n\", p->tot_odi);\r\n        printf(\"The number of wickets taken in test cricket by the player is: %d\\n\", p->wicket_test);\r\n        printf(\"The number of wickets taken in ODIs by the player is: %d\\n\", p->wicket_odi);\r\n        printf(\"\\n\");\r\n        p = p->next;\r\n    }\r\n}\r\n\r\nint main(){\r\n    \/\/declaring head\r\n    struct Player* head = (struct Player*) malloc(sizeof(struct Player));\r\n    head = NULL;\r\n    \/\/driver code\r\n    while(1){\r\n        int choice;\r\n        printf(\"\\nDo you want to proceed? Press 1 for yes and 2 for no: \");\r\n        scanf(\"%d\",&choice);\r\n        if(choice == 1){\r\n            printf(\"Choose one of the following operations to perform :\\n\");\r\n            printf(\"1. To change the size of the list of players\\n\");\r\n            printf(\"2. To print the number of players who have played at least a certain number of ODIs\\n\");\r\n            printf(\"3. To print the list of all players present\\n\");\r\n            printf(\"Enter your choice: \");\r\n            int n;\r\n            scanf(\"%d\",&n);\r\n            switch(n) {\r\n                case 1: head = input(head);\r\n                break;\r\n\r\n                case 2: printf(\"Enter the minimum number of ODIs you want: \");\r\n                int num;\r\n                scanf(\"%d\",&num);\r\n                one_day_printer(num, head);\r\n                break;\r\n\r\n                case 3: printer(head);\r\n                break;\r\n\r\n                default: printf(\"Enter a correct choice!!\\n\");\r\n            }\r\n        }else if(choice == 2){\r\n            printf(\"Thank You!!\");\r\n            break;\r\n        }else{\r\n            printf(\"Please enter 1 or 2\\n\");\r\n        }\r\n    }\r\n    return 0;\r\n}"
                }
            ]
        }
    ],
    "loops": [
        {
            "type": "lab",
            "subtopics":[
                { "subtopicName":"subtopic1",
            "Elements": [
                {
                    "Question": "A user executes a program and it asks to enter an integer. \nWhen s(he) enters 7 then the program prints the following 7*7 square matrix. \nWrite a C program which can read any positive integer (<=7) and perform this. \nUse loop to execute this operation and achieve proper alignment.\r\n\r\n1   2   3     4     5.      6.        7\r\n2   4 12   48 240 1440 10080\r\n3   6 18   72 360 2160 15120\r\n4   8 24   96 480 2880 20160\r\n5 10 30 120 600 3600 25100\r\n6 12 36 144 720 4320 30240\r\n7 14 42 168 840 5040 35280",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    \/\/ This a program to form a square matrix of order n (which is a positive integer less than 7)\r\n    int n,i,k,j;\r\n    scanf(\"%d\",&n);\r\n    for(i=1;i<=n;i++)\r\n    {\r\n        printf(\"%7d  \",i);\r\n    }\r\n    printf(\"\\n\");\r\n    for(k=2;k<=n;k++)\r\n    {\r\n        j=1;\r\n        for(i=k;j<=n;i=i*j)\r\n        {\r\n            printf(\"%7d  \",i);\r\n            j++;\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n}"
                },
                {
                    "Question":"Compute the following function given a value of x ( a real number) with the accuracy of 10^-6\r\n:f(x)= 1-x^2\/2! + x^4\/4! \u2013x^6\/6!+.....\r\n\r\nProvide outputs for x= 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 and 1.0.\r\nFor each value of x print also the number of iterations required to converge with the said accuracy.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  double x, sum=0.0, n=1.0;\r\n   scanf(\"%lf\",&x);\r\n   int i;\r\n   for(i=1;n>0.000001||n<-0.000001;i++){\r\n        sum+= n;\r\n       n=-n*x*x\/(2*i)\/(2*i-1);\r\n\r\n   }\r\n   printf(\"iterations: %d\\n\",i);\r\n   printf(\"sum: %lf\\n\\n\",sum);\r\n\r\n}\r\n"
                },
                {
                    "Question" : "Submit one (single) C program. \r\n    Definitions \r\n\r\n        1. A positive integer is called a PDS number if \nthe number is equal to the sum of the factorial of its digits. \nFor example, 1 (1 = 1!), 2 (2 = 2!), 145 (145 = 1! + 4! + 5!) are IIT numbers. \r\n\r\n        2. A positive integer is called a LAB number if \nthe number is equal to the sum of its divisor except itself. \nFor example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are KGP numbers. \r\n\r\n        3. An n-bow pattern is a pattern of height 2n-1, where \nthe first row has n stars, \nsecond row has n\u2014 1 stars, etc., n-1th row has 2 stars, nth row has 1 star, \nn+1th row has 2 stars, etc., and 2n-1th row has n stars.\r\n        ***\r\n        **\r\n        *\r\n        **\r\n        ***\r\n        The above pattern is a 3-bow pattern. \r\n\r\n      Write a C program to perform the following tasks. \r\n      1. Take as input an integer n. \r\n      2. Print all PDS numbers from 1 to n. \r\n      3. Print all LAB numbers from 1 to n. \r\n      4. If the number n is both a PDS number and a LAB number then print an n-bow pattern.\r\n    You may need to use math library function : #include <math.h> \r\n    If you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks.",
                    "Answer" : "#include <stdio.h>\r\n#include<math.h>\r\nint main ()\r\n{\r\n  \r\nlong int num, n, a, b, i, j, prod, sum = 0, lab, k, t, l;\t\/\/ variable define\r\n  printf (\"Enter Number: \");\r\n  \r\nscanf (\"%ld\", &num);\t\t\/\/ taking input\r\n  if (num == 0)\r\n    \r\n    {\r\n      \r\nprintf (\"Enter valid number\");\r\n    \r\n}\r\n  \r\n\/\/loop 1 for 1 to N\r\n    else\r\n    {\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\nn = b;\t\t\/\/ since we want changes for a specific loop only\r\n\t  sum = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  lab = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  \/\/loop for finding pds number\r\n\t  for (i = n; n > 0; n = n \/ 10)\r\n\t    \r\n\t      \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t    {\r\n\t      \r\nprod = 1;\t\/\/ for product\r\n\t      for (j = 1; j <= n % 10; j++)\r\n\t\t\r\n\t\t  \/\/n%10 to take last digit of the number\r\n\t\t  \/\/factorial loop\r\n\t\t{\r\n\t\t  \r\nprod = prod * j;\r\n\t\t\r\n}\r\n\t      \r\nsum = sum + prod;\t\/\/ for summing of factorial of digits\r\n\t    \r\n}\r\n\t  \r\n\/\/ print pds number\r\n\t    if (sum == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\" PDS number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n}\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\n\/\/ loop for finding lab number\r\n\t    lab = 0;\r\n\t  \r\nfor (a = 1; a < b; a++)\r\n\t    \r\n\t    {\r\n\t      \r\nif (b % a == 0)\r\n\t\t\r\n\t\t{\t\t\/\/ ch\r\n\t\t  lab = lab + a;\r\n\t\t\r\n}\r\n\t    \r\n}\r\n\t  \r\n\/\/print lab number\r\n\t    if (lab == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\"LAB number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n \r\n}\r\n      \r\n\t\/\/loop for n-star pattern\r\n\/\/ running only for  checking if n is pds and lab number or not, because it is to be printed for n only\r\n\t\r\nl = num;\r\n      \r\nfor (i = l; l > 0; l = l \/ 10)\r\n\t\r\n\t  \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t{\r\n\t  \r\nprod = 1;\r\n\t  \r\nfor (j = 1; j <= l % 10; j++)\r\n\t    \r\n\t      \/\/n%10 to take last digit of the number\r\n\t      \/\/factorial loop\r\n\t    {\r\n\t      \r\nprod = prod * j;\r\n\t    \r\n}\r\n\t  \r\nsum = sum + prod;\t\/\/ for summing of digits\r\n\t\r\n}\r\n      \r\n\/\/ print pds number\r\n\tif (sum == num)\r\n\t\r\n\t{\r\n\t  \r\nprintf (\"pds number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n \r\n \r\n\/\/ loop for finding lab number\r\n\tfor (a = 1; a < num; a++)\r\n\t\r\n\t{\r\n\t  \r\nif (num % a == 0)\r\n\t    \r\n\t    {\r\n\t      \r\nlab = lab + a;\t\/\/ sum of divisors\r\n\t    }\r\n\t\r\n}\r\n      \r\n\/\/print lab number\r\n\tif (lab == num)\r\n\t{\r\n\t  \r\nprintf (\"lab number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n\t\/\/ check if n is lab and pds number\r\n\tif (lab == num && sum == num)\r\n\t\r\n\t{\r\n\t  \r\n \r\nfor (int t = 0; t < b; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n\/\/for decreasing star\r\n\t\tfor (int k = 1; k <= num - t; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\t\r\nprintf (\"\\n\");\r\n\t    \r\n} \r\n\t    \/\/ for increasing star\r\n\t    for (int t = 1; t < num; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n \r\nfor (int k = 1; k <= t + 1; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\tprintf (\"\\n\");\r\n\t\r\n}}\r\n    \r\n} \r\nreturn 0;\r\n\r\n \r\n \r\n \r\n}\r\n"
                },
                {
                    "Question":"Given a numerator and a denominator as input,\r\nyour program has to print the sequence representing the continued fraction for as shown in the\r\nexamples. You can use one extra integer variable, say ; use of more extra variables will attract penalty.\r\nYou should use a loop because the sequence may be arbitrarily long.",
                    "Answer":"\/\/ Continued fraction for a\/b.\r\n\r\n#include<stdio.h>\r\n\r\nint main(){\r\n  int a, b, c=0; \r\n  \r\n  printf(\"Enter a and b: \"); \r\n  scanf(\"%d%d\", &a, &b);\r\n  \r\n  do{\r\n    if(c==0)\r\n      printf(\"Continued fraction = [%d; \", a\/b); \r\n    else  \r\n      printf(\"%d, \", a\/b); \r\n    c = a%b; \r\n    a = b, b = c;\r\n  }while(a>1 && b>0);\r\n  \r\n  printf(\"\\b\\b].\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question": "Note that\r\n(1)4^2mod23=16;\r\n(2)4^3mod23=18;\r\n(3)4^4mod23=3;\r\n(4)4^5mod23=12;\r\n(5)4^6mod23=2;\r\n(6)4^7mod23=8;\r\n(7)4^8mod23=9;\r\n(8)4^9mod23=13;\r\n(9)4^10mod23=6; and\r\n(10) 4^11mod23=1\r\nbut no power of 4 covers integers 4, 5, 7, 10, 11, 14, 15, 17, 19, 20, 21, 22 modulo 23.\r\nHere 23 is a prime number.\r\nHowever,\r\n(1)5^2mod23=2;\r\n(2)5^3mod23=10;\r\n(3)5^4mod23=4;\r\n(4)5^5mod23=20;\r\n(5)5^6mod23=8;\r\n(6)5^7mod23=17;\r\n(7)5^8mod23=16;\r\n(8)5^9mod23=11;\r\n(9)5^10mod23=9;\r\n(10)5^11mod23=22;\r\n(11)5^12mod23=18;\r\n(12)5^13mod23=21;\r\n(13)5^14mod23=13;\r\n(14)5^15mod23=19;\r\n(15)5^16mod23=3;\r\n(16)5^17mod23=15;\r\n(17)5^18mod23=6;\r\n(18)5^19mod23=7;\r\n(19)5^20mod23=12;\r\n(20)5^21mod23=14;\r\n(21)5^22mod23=1;\r\nWe say that the \u2018generator\u2019 for prime number n=23 is r=5, \nwhere the generator r raised to integral powers generates all the 21 integers \nfrom 2 through 22, including r^1=5^1=5^23mod23=5.\r\n\r\nSo, given a prime number n in the input, we require to compute the smallest integer r < n, \ncalled the \u2018generator\u2019, such that integral powers of r modulo n will span \nall integers 1 through n\u22121. \nWrite a C program to compute the \u2018generator\u2019 of a given prime number n \nby first checking whether the given integer is a prime number and rejecting if it is not so.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n\t\/* Taking input for the prime number *\/\r\n\tint n;\r\n\tprintf(\"Enter a prime number: \");\r\n\tscanf(\"%d\", &n);\r\n\r\n\t\/* Checking whether the number is really prime or not *\/\r\n\tint isPrime = 1;\r\n\tif (n == 0 || n == 1){\r\n    isPrime = 0;\r\n\t}\r\n\r\n\tfor (int i = 2; i <= n \/ 2; i++) {\r\n\t\tif (n % i == 0) {\r\n\t\tisPrime = 0;\r\n\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (isPrime == 0){\r\n    \tprintf(\"%d is not a prime number.\\n\", n);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t\/* Finding the generator for n *\/\r\n\tint r , checker ;\r\n\tint k = 1 ;\r\n\r\n\tunsigned long long int power = 1, p;\r\n\r\n\t\tfor (r = 2; r < n; r ++){\r\n\t\t\tprintf(\"Checking for r = %d\\n\", r);\r\n\t\t\tfor ( ; ; ){\r\n\t\t\t\tint init_k = k;\r\n\t\t\t\tfor (int i = 1; i <= n-1; i++) {\r\n\t\t\t\t\tpower = power * r;\r\n\t\t\t\t\tp = (power)%n;\r\n\t\t\t\t\tprintf(\"%llu - power\\n\", p);\r\n\t\t\t\t\tif (p == k){\r\n\t\t\t\t\t\tprintf(\"%llu found\\n\", p);\r\n\t\t\t\t\t\tk++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif( k == init_k){\r\n\t\t\t\t\tchecker = 0;\r\n\t\t\t\t\tk = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tpower = 1;\r\n\r\n\t\t\t\tif(k > n -1 ){\r\n\t\t\t\t\tchecker = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (checker == 1){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\tif (checker == 1){\r\n\t\tprintf(\"The generator for %d is: %d\\n\", n, r);\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n"
                },
                {
                    "Question":"An integer point means its coordinates are integers. Given as the input the coordinates of two\r\ndistinct integer points, and your program has to find the number of integer points on the straight\r\nline segment and has to print the coordinates of these points. You should use only integer variables\r\nand integer computations in your program.",
                    "Answer":"\/\/ Integer points on a straight line segment with integer endpoints.\r\n\r\n#include <stdio.h>\r\n\r\nint main(){\r\n  int x1, y1, x2, y2;\r\n  int a, b, c, i, x, y, dx, dy;\r\n  printf(\"Enter (x,y) coordinates of Point p: \");\r\n  scanf(\"%d%d\", &x1, &y1);\r\n  printf(\"Enter (x,y) coordinates of Point q: \");\r\n  scanf(\"%d%d\", &x2, &y2);\r\n  \r\n  a = x2 - x1; \r\n  b = y2 - y1;\r\n  if (a<0) a = -a;\r\n  if (b<0) b = -b;\r\n  \r\n  while(b!=0){ \/\/ find GCD(a,b)\r\n    c = b; \r\n    b = a%b;\r\n    a = c; \r\n  } \r\n  \/\/ The variable a finally contains the GCD - it's so cute! Right?\r\n  \r\n  printf(\"Number of integer points on the line segment pq = %d.\\n\", a+1); \r\n  \r\n  dx = (x2 - x1)\/a, dy = (y2 - y1)\/a;\r\n  \r\n  printf(\"Integer points on the line segment pq:\\n\"); \r\n  for(x=x1, y=y1, i=0; i<a+1; i++){\r\n    printf(\"%4d: (%d,%d)\\n\", i+1, x, y);\r\n    x += dx, y+= dy;\r\n  }\r\n  \r\n  return 1;\r\n}"
                },
                {
                    "Question":"In this problem, you will scan a poem (along with its name and its poet) and do some computations as\r\nfollows.\r\n\uE00C Take a poem as input through the keyboard and store it in a string variable. Assume that the\r\npoem has at most 1000 characters in total. Use scanf(\"%[^#]s\", P) for scanning the\r\nwhole text at once in the character array P.\r\nThe poem has the following form.\r\n\u25CF Line 1 contains the name of the poem.\r\n\u25CF Line 2 is blank (= a single newline character).\r\n\u25CF Line 3 contains the poet\u2019s name.\r\n\u25CF Line 4 is blank.\r\n\u25CF The poem starts from Line 5.\r\n\u25CF There are no two consecutive blank lines anywhere.\r\n\u25CF Stanzas are separated by exactly one blank line.\r\n\u25CF After the last line of the poem, the character \u2018#\u2019 appears in a new line to mark the end.\r\n\u25CF There is exactly one space or a punctuation mark or a newline after each word.\r\n\u25CF There is no unnecessary space anywhere.\r\n\u25CF A punctuation mark is immediately preceded by a word, and immediately followed by\r\neither a space or a newline.\r\n\u25CF A hyphenated word is counted as a single word (ex: fast-paced, I-). A hyphen is not\r\ncounted as a punctuation mark.\r\n\u25CF Following are to be counted as punctuation marks: \u2018.\u2019, \u2018,\u2019, \u2018:\u2019, \u2018;\u2019, \u2018!\u2019, \u2018?\u2019.\r\n\u25CF A word with apostrophe is counted as a single word (ex: we\u2019ve, there\u2019s).\r\n\uE00C Print the name of the poem and its poet [2 marks], and the number of lines [2 marks], words\r\n[2 marks], stanzas [2 marks], and punctuation marks [2 marks] in the main body of poem.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  char P[1000];\r\n  int line=0, word=0, stanza=0, punc=0, i=0;\r\n  printf(\"Enter a poem with its name and poet: \\n\");\r\n  scanf(\"%[^#]s\", P);\r\n  \r\n  printf(\"\\nPoem name: \");\r\n  do\r\n    printf(\"%c\", P[i++]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  printf(\"\\nPoet name: \");\r\n  do\r\n    printf(\"%c\", P[++i]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  do{    \r\n    if(P[i]=='\\n'){\r\n      i++, stanza++;\r\n      continue;\r\n    }\r\n    \r\n    do{ \/\/scan a word\r\n      i++; \r\n    } while(!(P[i] == ' ' || P[i] == '\\n'));\r\n    \r\n    word++;\r\n    \r\n    if(P[i] == '\\n')\r\n      line++;\r\n    \r\n    if(P[i-1]=='.' || P[i-1]==',' || P[i-1]==':' || P[i-1]==';' || P[i-1]=='!' || P[i-1]=='?')\r\n      punc++;\r\n    \r\n    i++;\r\n  } while(P[i]!='\\0');\r\n  \r\n  printf(\"\\nLines: %d\\nWords: %d\\nStanzas: %d\\nPunctuation marks: %d\\n\", line, word, stanza, punc);\r\n  \r\n  return 0;\r\n}"
                },
                {
                    "Question":"Given a numerator and a denominator as input,\r\nyour program has to print the sequence representing the continued fraction for as shown in the\r\nexamples. You can use one extra integer variable, say ; use of more extra variables will attract penalty.\r\nYou should use a loop because the sequence may be arbitrarily long.",
                    "Answer":"\/\/ Continued fraction for a\/b.\r\n\r\n#include<stdio.h>\r\n\r\nint main(){\r\n  int a, b, c=0; \r\n  \r\n  printf(\"Enter a and b: \"); \r\n  scanf(\"%d%d\", &a, &b);\r\n  \r\n  do{\r\n    if(c==0)\r\n      printf(\"Continued fraction = [%d; \", a\/b); \r\n    else  \r\n      printf(\"%d, \", a\/b); \r\n    c = a%b; \r\n    a = b, b = c;\r\n  }while(a>1 && b>0);\r\n  \r\n  printf(\"\\b\\b].\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":"An integer point means its coordinates are integers. Given as the input the coordinates of two\r\ndistinct integer points, and your program has to find the number of integer points on the straight\r\nline segment and has to print the coordinates of these points. You should use only integer variables\r\nand integer computations in your program.",
                    "Answer":"\/\/ Integer points on a straight line segment with integer endpoints.\r\n\r\n#include <stdio.h>\r\n\r\nint main(){\r\n  int x1, y1, x2, y2;\r\n  int a, b, c, i, x, y, dx, dy;\r\n  printf(\"Enter (x,y) coordinates of Point p: \");\r\n  scanf(\"%d%d\", &x1, &y1);\r\n  printf(\"Enter (x,y) coordinates of Point q: \");\r\n  scanf(\"%d%d\", &x2, &y2);\r\n  \r\n  a = x2 - x1; \r\n  b = y2 - y1;\r\n  if (a<0) a = -a;\r\n  if (b<0) b = -b;\r\n  \r\n  while(b!=0){ \/\/ find GCD(a,b)\r\n    c = b; \r\n    b = a%b;\r\n    a = c; \r\n  } \r\n  \/\/ The variable a finally contains the GCD - it's so cute! Right?\r\n  \r\n  printf(\"Number of integer points on the line segment pq = %d.\\n\", a+1); \r\n  \r\n  dx = (x2 - x1)\/a, dy = (y2 - y1)\/a;\r\n  \r\n  printf(\"Integer points on the line segment pq:\\n\"); \r\n  for(x=x1, y=y1, i=0; i<a+1; i++){\r\n    printf(\"%4d: (%d,%d)\\n\", i+1, x, y);\r\n    x += dx, y+= dy;\r\n  }\r\n  \r\n  return 1;\r\n}"
                },
                {
                    "Question":"In this problem, you will scan a poem (along with its name and its poet) and do some computations as\r\nfollows.\r\n\uE00C Take a poem as input through the keyboard and store it in a string variable. Assume that the\r\npoem has at most 1000 characters in total. Use scanf(\"%[^#]s\", P) for scanning the\r\nwhole text at once in the character array P.\r\nThe poem has the following form.\r\n\u25CF Line 1 contains the name of the poem.\r\n\u25CF Line 2 is blank (= a single newline character).\r\n\u25CF Line 3 contains the poet\u2019s name.\r\n\u25CF Line 4 is blank.\r\n\u25CF The poem starts from Line 5.\r\n\u25CF There are no two consecutive blank lines anywhere.\r\n\u25CF Stanzas are separated by exactly one blank line.\r\n\u25CF After the last line of the poem, the character \u2018#\u2019 appears in a new line to mark the end.\r\n\u25CF There is exactly one space or a punctuation mark or a newline after each word.\r\n\u25CF There is no unnecessary space anywhere.\r\n\u25CF A punctuation mark is immediately preceded by a word, and immediately followed by\r\neither a space or a newline.\r\n\u25CF A hyphenated word is counted as a single word (ex: fast-paced, I-). A hyphen is not\r\ncounted as a punctuation mark.\r\n\u25CF Following are to be counted as punctuation marks: \u2018.\u2019, \u2018,\u2019, \u2018:\u2019, \u2018;\u2019, \u2018!\u2019, \u2018?\u2019.\r\n\u25CF A word with apostrophe is counted as a single word (ex: we\u2019ve, there\u2019s).\r\n\uE00C Print the name of the poem and its poet [2 marks], and the number of lines [2 marks], words\r\n[2 marks], stanzas [2 marks], and punctuation marks [2 marks] in the main body of poem.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  char P[1000];\r\n  int line=0, word=0, stanza=0, punc=0, i=0;\r\n  printf(\"Enter a poem with its name and poet: \\n\");\r\n  scanf(\"%[^#]s\", P);\r\n  \r\n  printf(\"\\nPoem name: \");\r\n  do\r\n    printf(\"%c\", P[i++]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  printf(\"\\nPoet name: \");\r\n  do\r\n    printf(\"%c\", P[++i]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  do{    \r\n    if(P[i]=='\\n'){\r\n      i++, stanza++;\r\n      continue;\r\n    }\r\n    \r\n    do{ \/\/scan a word\r\n      i++; \r\n    } while(!(P[i] == ' ' || P[i] == '\\n'));\r\n    \r\n    word++;\r\n    \r\n    if(P[i] == '\\n')\r\n      line++;\r\n    \r\n    if(P[i-1]=='.' || P[i-1]==',' || P[i-1]==':' || P[i-1]==';' || P[i-1]=='!' || P[i-1]=='?')\r\n      punc++;\r\n    \r\n    i++;\r\n  } while(P[i]!='\\0');\r\n  \r\n  printf(\"\\nLines: %d\\nWords: %d\\nStanzas: %d\\nPunctuation marks: %d\\n\", line, word, stanza, punc);\r\n  \r\n  return 0;\r\n}"
                },
                {
                    "Question":"1. Write a program that takes an integer between I and 9 as input, \nand prints out on the terminal a pattern similar to the following. The example display shown is for input 5.\r\n1                1\r\n22            22\r\n333        333\r\n4444    4444\r\n5555555555",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\n    int n, i = 1;\r\n    printf(\"Enter any integer between 1 to 9__\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n >= 1 && n <= 9)\/\/condition check\r\n    {\r\n        while (i <= n)\r\n        {\r\n            for (int k = 1; k <= i; k++)\/\/This for loop prints the number 'i' i times \r\n            {\r\n                printf(\"%d\", i);\r\n            }\r\n            for (int l = 1; l <= 2 * (n - i); l++)\/\/ this for loop enters the spaces between the two sequence of i's\r\n            {\r\n                printf(\" \");\r\n            }\r\n            for (int m = 1; m <= i; m++)\/\/This for loop prints the number 'i' i times \r\n            {\r\n                printf(\"%d\", i);\r\n            }\r\n            printf(\"\\n\");\r\n            i++;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        printf(\"The entered no. must be between 1 to 9 only.\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"2. Write a program that will prompt the user to enter a sequence of positive integer values. At any time,\r\nyour program should display the two largest values entered so far and also the two smallest values. When the\r\nuser has entered only one value, for the second largest and second smallest numbers your program should\r\ndisplay \"Value h as not yet been entered\". Your program should terminate when the user enters any negative\r\nnumber.\r\nFor example:\r\nEnter numbers: 1\r\nLargest number: 1\r\nSecond largest number: Value Not yet entered\r\nSmallest number:1\r\nSecond smallest number: Value Not yet entered\r\nEnter numbers: 1 2 5 4\r\nLargest number: 5\r\nSecond largest number: 4\r\nSmallest number: I\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2\r\nLargest number: 8\r\nSecond largest number:5\r\nSmallest number: 1\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2 1 1\r\nLargest number: 8\r\nSecond largest number: 5\r\nSmallest number: 1\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2 1 1  -10\r\n<Program terminates>\r\n",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\n    int n, n1 = 1, max, max1, min, min1;\r\n    printf(\"Enter any positive integer numbers__\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n < 0)\r\n    {\r\n        return 0;\r\n    }\r\n    printf(\"\\nlargest number: %d\\n second largest number: not enetred yet\\n\", n);\r\n    printf(\"smallest number: %d\\n second smallest number: not enetred yet\\n\\n**********\\n\", n);\r\n    max = n;\r\n    min = n;\r\n    printf(\"Enter any positive integer numbers__\\n\");\r\n    scanf(\"%d\", &n1);\r\n    while (1)\r\n    {\r\n        if (n1 < 0)\r\n        {\r\n            return 0; \/\/closes the program for negative values\r\n        }\r\n        if (n1 > max)\r\n        { \/\/switches the variables\r\n            max1 = max;\r\n            max = n1;\r\n        }\r\n        else if (n1 < max && n1 > max1)\r\n        { \/\/switches the variables\r\n            max1 = n1;\r\n        }\r\n        if (n1 < min)\r\n        { \/\/switches the variables\r\n            min1 = min;\r\n            min = n1;\r\n        }\r\n        else if (n1 > min && n1 < min1)\r\n        { \/\/switches the variables\r\n            min1 = n1;\r\n        }\r\n        printf(\"\\nlargest number: %d\\n second largest number:%d\\n\", max, max1);\r\n        printf(\"smallest number: %d\\n second smallest number:%d \\n\\n**********\\n\", min, min1);\r\n        printf(\"Enter any positive integer numbers__\\n\");\r\n        scanf(\"%d\", &n1); \/\/enters new value for n1 for the next loop\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"Write a program that takes a positive integer n and displays the first n terms of the following series: \r\n1, -1, 2, -3, >, -8, ...\r\nYou need to handle cases when the user enters or negative numbers by giving appropriate messages.",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int n,n1=1, n2=-1,n3;\r\n    printf(\"Enter the number of terms to be printed\\n\");\r\n    scanf(\"%d\", &n);\r\n    if(n==1){\r\n        printf(\"The series is 1, \");\r\n        return 0;\r\n    }\r\n    else if(n==2){\r\n        printf(\"The series is 1, -1, \");\r\n        return 0;\r\n    }\r\n    else if(n==0 || n<0){\r\n        printf(\"invalid entry!! The entered number must be a natural number.\");\r\n        return 0;\r\n    }\r\n    else{\r\n    printf(\"The series is 1, -1, \");\r\n    for(int i=3; i<= n; i++){\/\/ The count i begins from 3 as the first two elements are printed already.\r\n        n3= n1 - n2;\r\n        printf(\" %d,\", n3);\r\n        n1= n2;\/\/Changing the variables for the next loops\r\n        n2=n3;\/\/Changing the variables for the next loops\r\n\r\n    }\r\n\r\n}\r\nreturn 0;\r\n}" 
                },
                {
                    "Question":"4. Write a program to ask the user how many random numbers to generate. Generate that many random\r\nnumbers between 0 and 100. Display the random numbers. Display the percentage of random numbers that\r\nwere generated between 0-9, 10-19,20-29,., and 90-100.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int n,sum=0;\r\n    float c[10];\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        c[i] = 0;\r\n    }\r\n    srand(time(0));\r\n    printf(\"Enter the no of random nos needed__\\n\");\r\n    scanf(\"%d\", &n);\r\n    int arr[n];\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = rand() % 100;\r\n    }\r\n    printf(\"The nos are___\\n\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d\\n\", arr[i]);\r\n    }\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = arr[i] \/ 10;\r\n        switch (arr[i])\r\n        {\r\n        case 0:\r\n            c[0]++;\r\n            break;\r\n        case 1:\r\n            c[1]++;\r\n            break;\r\n        case 2:\r\n            c[2]++;\r\n            break;\r\n        case 3:\r\n            c[3]++;\r\n            break;\r\n        case 4:\r\n            c[4]++;\r\n            break;\r\n        case 5:\r\n            c[5]++;\r\n            break;\r\n        case 6:\r\n            c[6]++;\r\n            break;\r\n        case 7:\r\n            c[7]++;\r\n            break;\r\n        case 8:\r\n            c[8]++;\r\n            break;\r\n        case 9:\r\n            c[9]++;\r\n            break;\r\n        }\r\n    }\r\n    for(int i=0; i<10; i++){\r\n        sum +=c[i];\r\n    }\r\n    for(int i=0; i<10; i++){\r\n        printf(\"%d-%d = %.2f percent\\n\", i*10, i*10 + 9, (c[i]\/sum)*100);\r\n    }\r\n    return 0;\r\n}" 
                }]
                },
                { "subtopicName":"subtopic2",
                "Elements":[
                {
                    "Question": "The infinite series for cos(x):\r\ncos(x) = 1 \u2013 x2 \/2! + x4 \/4! \u2013 x6 \/6! + ............;\r\nwhere x is a floating point number.\r\nWrite a C program which does the following:\r\n\r\n1. (a) Takes in 3 floating point numbers x,y,z and a positive integer n.\r\n    (b) The program then keeps reading floating point numbers from the keyboard till it gets a floating point\r\n          number a, -1 < a <1,\r\n    (c) It then continues to read floating point numbers till it gets a floating point number b, -0.5 < b < 0.5.\r\n2. (a) The program then computes cos(x), cos(y), cos(z) upto n terms of the infinite series.\r\n    (b) It also computes cos(a) and cos(b) using the infinite series, upto terms having magnitude 10-5, and\r\n         remembers for each a and b the number of terms that had to be computed.\r\n3. (a) The program then prints cos(x), cos(y), cos(z) calculated upto n terms.\r\n    (b) It also prints cos(a), cos(b) calculated upto terms with magnitude 10-5, as well as the number of\r\n         terms that had to be calculated for each of a and b.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    float x,y,z;\r\n    int n;\r\n\r\n    \/\/ Part 1(a) where we take x,y,z,n as input from user\r\n    printf(\"Enter the value of three floating point numbers x,y,z one by one side by side with a space between them: \");\r\n    scanf(\"%f%f%f\",&x,&y,&z);\r\n    printf(\"Enter the value of n which is a positive integer: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    float a,b;\r\n\r\n    \/\/ Part 1(b) where we take a as input from user till user gives a such that -1<a<1\r\n    printf(\"Enter the value of a which should be such that -1<a<1: \");\r\n    scanf(\"%f\",&a);\r\n    while(a<=-1 || a>=1){\r\n        printf(\"Value of a is not in the specified range. Please enter the value of a once again: \");\r\n        scanf(\"%f\",&a);\r\n    }\r\n\r\n    \/\/ Part 1(c) where we take b as input from user till user gives b such that -0.5<b<0.5\r\n    printf(\"Enter the value of b which should be such that -0.5<b<0.5: \");\r\n    scanf(\"%f\",&b);\r\n    while(b<=-0.5 || b>=0.5){\r\n        printf(\"Value of b is not in the specified range. Please enter the value of b once again: \");\r\n        scanf(\"%f\",&b);\r\n    }\r\n\r\n    float term=1.0,cosx=0.0,cosy=0.0,cosz=0.0,cosa=0.0,cosb=0.0; \/\/ term variable is used to find the value of each term of the cos series\r\n    \/* Here term variable is always positive since its multiplied by twice in each iteration\r\n       we just add or subtract this positive value of term variable as required in the series\r\n    *\/\r\n    int fac=1; \/\/ fac variable is used to find the value of the factorial of 2,4,6,8,... as the series progresses\r\n\r\n    \/*Part 2(a)*\/\r\n\r\n    \/\/ Computing cos(x) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosx+=term;\r\n            term*=x\/(fac);\r\n            fac++;\r\n            term*=x\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosx-=term;\r\n            term*=x\/(fac);\r\n            fac++;\r\n            term*=x\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n\r\n    \/\/ Computing cos(y) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosy+=term;\r\n            term*=y\/(fac);\r\n            fac++;\r\n            term*=y\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosy-=term;\r\n            term*=y\/(fac);\r\n            fac++;\r\n            term*=y\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n\r\n    \/\/ Computing cos(z) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosz+=term;\r\n            term*=z\/(fac);\r\n            fac++;\r\n            term*=z\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosz-=term;\r\n            term*=z\/(fac);\r\n            fac++;\r\n            term*=z\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n    int counter_a=0; \/\/ this variable is used to keep record of the number of terms used to find cos(a)\r\n\r\n    \/*Part 2(b)*\/\r\n\r\n    \/\/Computing cos(a) using the infinite series, upto terms having magnitude 10^-5\r\n    while(term>=pow(10,-5)){\r\n        counter_a++;\r\n        if(counter_a%2!=0){\r\n            cosa+=term;\r\n            term*=a\/(fac);\r\n            fac++;\r\n            term*=a\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosa-=term;\r\n            term*=a\/(fac);\r\n            fac++;\r\n            term*=a\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n    int counter_b=0; \/\/ this variable is used to keep record of the number of terms used to find cos(b)\r\n\r\n    \/\/Computing cos(b) using the infinite series, upto terms having magnitude 10^-5\r\n    while(term>=pow(10,-5)){\r\n        counter_b++;\r\n        if(counter_b%2!=0){\r\n            cosb+=term;\r\n            term*=b\/(fac);\r\n            fac++;\r\n            term*=b\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosb-=term;\r\n            term*=b\/(fac);\r\n            fac++;\r\n            term*=b\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/*Part 3(a)*\/\r\n    \/\/Printing cos(x), cos(y), cos(z) calculated upto n terms\r\n    printf(\"The value of cos(x) calculated upto %d terms is: %f\\n\",n,cosx);\r\n    printf(\"The value of cos(y) calculated upto %d terms is: %f\\n\",n,cosy);\r\n    printf(\"The value of cos(z) calculated upto %d terms is: %f\\n\",n,cosz);\r\n\r\n    \/*Part 3(b)*\/\r\n    \/\/Printing cos(a) value\r\n    printf(\"The value of cos(a) calculated upto terms with magnitude 10^-5 is: %f\\n\",cosa);\r\n    \/\/Printing number of terms of the infinite series that had to be calculated to find cos(a)\r\n    printf(\"The number of terms that had to be calculated to find cos(a) are: %d\\n\",counter_a);\r\n    \/\/Printing cos(b) value\r\n    printf(\"The value of cos(b) calculated upto terms with magnitude 10^-5 is: %f\\n\",cosb);\r\n    \/\/Printing number of terms of the infinite series that had to be calculated to find cos(b)\r\n    printf(\"The number of terms that had to be calculated to find cos(b) are: %d\\n\",counter_b);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Part-I\r\nA positive integer is called an IIT number if the number is equal to the sum of factorial of its digits. For\r\nexample, 1 (1 = 1!), 2 (2 = 2!), 145 (145 = 1! + 4! + 5!) are IIT numbers.\r\nWrite a C program to perform the following tasks.\r\n1. To check if a given positive number x is an IIT number.\r\n2. To print all IIT numbers from 1 to a given input number n.\r\n\r\nPart-II\r\nA positive integer is called a KGP number if the number is equal to the sum of its divisor except itself.\r\nFor example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are KGP numbers.\r\nWrite a C program to perform the following tasks.\r\n1. To check if a given positive number x is a KGP number.\r\n2. To print all KGP numbers from 1 to a given input number n.\r\n\r\n                                        *  *  *  *  *\r\n                                        *  *  *  *\r\n                                        *  *  *\r\n                                        *  *\r\n                                        *\r\n                                        *  *\r\n                                        *  *  *\r\n                                        *  *  *  *\r\n                                        *  *  *  *  *\r\n                         Table 1: Star K of height 9.\r\n\r\nPart-III\r\n\r\nWrite a C program to perform the following tasks.\r\n1. Take a positive integer n as input and output a K of height 2n - 1 stars. A star K of height 9 is the\r\nfollowing.\r\nSubmit one (single) C program.\r\n\r\n\r\nSample Output\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out .\/a.out\r\nWrite number x: 145\r\n145 is an IIT number\r\nWrite number n: 1000\r\nThe IIT numbers between 1 and 1000: 1, 2, 145,\r\nWrite number x: 28\r\n28 is a KGP number\r\nWrite number n: 1000\r\nThe KGP numbers between 1 and 1000: 6, 28, 496,\r\nWrite a positive integer n: 2\r\nStar K of height 3 is\r\n*  *\r\n*\r\n*  *\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/*Part I*\/\r\n\r\n    \/\/Task 1\r\n    int x,n,k,sum=0;\r\n    printf(\"Write number x: \");\r\n    scanf(\"%d\",&x);\r\n    k=x; \/\/k is used to store value of x so that x is preserved for later comparison with sum\r\n    while(k>0){\r\n        int d=k%10; \/\/d stores last digit of the number k\r\n        int prod=1; \/\/prod stores value of factorial of each digit\r\n        for(int i=2;i<=d;i++){\r\n            prod*=i;\r\n        }\r\n        sum+=prod;\r\n        k\/=10; \/\/k is divided by 10 to make second last digit as last digit for furthur use in loop\r\n    }\r\n    if(sum==x){\r\n        printf(\"%d is an IIT number\\n\",x);\r\n    }else{\r\n        printf(\"%d is not an IIT number\\n\",x);\r\n    }\r\n\r\n    \/\/Task 2\r\n    printf(\"Write number n: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"The IIT numbers between 1 and %d: \",n);\r\n    for(int i=1;i<=n;i++){\r\n        int num=i; \/\/num stores value of i so that i is not affected in the process as its reserved for the for-loop\r\n        sum=0;\r\n        while(num>0){\r\n            int d=num%10; \/\/this d has same use as that in Task 1\r\n            int prod=1; \/\/this prod has same use as in Task 1\r\n            for(int i=2;i<=d;i++){\r\n                prod*=i;\r\n            }\r\n            sum+=prod;\r\n            num\/=10; \/\/same concept as in Task 1\r\n        }\r\n        if(sum==i){\r\n            printf(\"%d, \",i);\r\n        }\r\n    }\r\n    printf(\"\\n\"); \/\/Changing the line for input of next part\r\n\r\n\r\n\r\n    \/*Part II*\/\r\n\r\n    \/\/Task 1\r\n    printf(\"Write number x: \");\r\n    scanf(\"%d\",&x); \/\/variable x is reused from Part I\r\n    sum=0; \/\/variable sum is reused from Part I\r\n    for(int i=1;i<=x\/2;i++){ \/\/checking till x\/2 is fine because largest divisor of x which is not x itself will be <=x\/2\r\n        if(x%i==0){\r\n            sum+=i;\r\n        }\r\n    }\r\n    if(sum==x){\r\n        printf(\"%d is a KGP number\\n\",x);\r\n    }else{\r\n        printf(\"%d is not a KGP number\\n\",x);\r\n    }\r\n\r\n    \/\/Task 2\r\n    printf(\"Write number n: \");\r\n    scanf(\"%d\",&n);  \/\/variable n is reused from Part I\r\n    printf(\"The KGP numbers between 1 and %d: \",n);\r\n    for(int i=6;i<=n;i++){  \/\/i starts from 6 since there exits no KGP number smaller than 6\r\n        sum=0; \/\/variable sum is reused from Part I\r\n        int num=i; \/\/same concept as in Part I Task 2\r\n        for(int j=1;j<=num\/2;j++){\r\n            if(i%j==0){\r\n                sum+=j;\r\n            }\r\n        }\r\n        if(sum==i){\r\n            printf(\"%d, \",i);\r\n        }\r\n    }\r\n    printf(\"\\n\"); \/\/Changing the line for input of next part\r\n\r\n\r\n\r\n    \/*Part III*\/\r\n    printf(\"Write a positive integer n: \");\r\n    scanf(\"%d\",&n);  \/\/variable n is reused from Part I\r\n    printf(\"Star K of height %d is\\n\",2*n-1);\r\n    for(int i=0;i<2*n-1;i++){ \/\/variable i takes care of all 2*n-1 rows of the pattern\r\n        if(i<n){              \/\/ takes care of the upper halve of the pattern including the middle single star\r\n            for(int j=n-i;j>=1;j--){ \/\/variable j takes care of number of * in each row\r\n                printf(\"* \");\r\n            }\r\n        }else{                 \/\/ takes care of the lower halve of the pattern after the middle single star\r\n            for(int j=1;j<=i-n+2;j++){ \/\/ j goes from 1 till i-n+2 because as i changes from n to 2*n-2 this upper limit changes from 2 to n\r\n                printf(\"* \");\r\n            }\r\n        }\r\n        printf(\"\\n\"); \/\/ changing line after printing each row to move to the next row\r\n    }\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Consider the movement of a particle starting at x = 0. The particle can move\r\n                either in forward (towards +x), or backward (towards \u2212x), which is randomly\r\n                selected (like obtaining head or tail in coin tossing). This is a typical observation\r\n                in several random real life phenomena (e.g. motion of atoms, Brownian motion,\r\n                etc).\r\n                Assume that each step of the particle is equal to one unit of distance (i.e.\r\n                +1 or -1). We wish to compute the expected distance of the particle from\r\n                the starting point (or how far does the particle travel on the average) after n\r\n                number of steps. Although apparently it might seem that the average progress\r\n                will be zero, but actually as n increases, the total distance also increases. You\r\n                have to write a code to simulate n number of random steps and calculate the\r\n                final distance dn from the initial step, repeat this process for a large number\r\n                of iterations (k) and add the square of distance dn in each iteration to get the\r\n                total distance D. That is, D =\r\n                Pk\r\n                n=1 d\r\n                2\r\n                n\r\n                . Finally the expected distance DE\r\n                is computed as, DE =\r\n                p\r\n                D\/k. Eventually you will see that the total distance\r\n                covered is approximately the square root of the number of steps. Of course\r\n                the answer will vary little bit in every execution of the program due to the\r\n                randomness.\r\n                For your convenience, the random step generator code is provided as follows.\r\n                Include the following headers in your code:\r\n                #include<time.h>, #include<stdlib.h>\r\n                Add this at the beginning of main( ) function: srand(time(NULL)); Then the\r\n                following line of code generates +1 or -1 randomly and assigns to variable p:\r\n                p = rand() & 1 ? -1 : 1;\r\n                Example:\r\n                Input: n = 25, k = 100000\r\n                Output: 5.00119\r\n                Input: n = 100, k = 100000\r\n                Output: 10.0023\r\n                Input: n = 50, k = 100000\r\n                Output: 7.0903",
                    "Answer": "#include <stdio.h>\r\n            #include <stdlib.h>\r\n            #include<time.h>\r\n            \r\n            int main()\r\n            {\r\n                srand(time(NULL));\r\n                int n;\r\n                int k;\r\n                printf(\"n= \");\r\n                scanf(\"%d\",&n);\r\n                printf(\"k= \");\r\n                scanf(\"%d\",&k);\r\n            \r\n                int D =0;\r\n                int p;\r\n                for(int i=0;i<k;i++){\r\n                    int d =0;\r\n                    for(int j=0;j<n;j++){\r\n                        p = rand() & 1 ? -1 : 1;\r\n                        d=d+p;\r\n                    }\r\n                    D+=d*d;\r\n            \r\n            \r\n                }\r\n                printf(\"%f\\n\",sqrt(((float)D)\/k));\r\n                return 0;\r\n            }"
                },
                {
                    "Question":"Consider that n number of machines in the CSE department are broken that\r\n                needs to be fixed. Suppose each machine has different configuration, and the\r\n                department is planning to assign each machine to an individual vendor for repairing, \n                and there are total n number of vendors. Now each of these vendors\r\n                are demanding different prices for fixing different machines. The price for each\r\n                machine demanded by each vendor is put in an array. To keep things simple, consider n = 4. \n                For example, the price list of machine1 is stored as int\r\n                m1[4] = {8200, 8300, 6900, 9200}. This means for machine1, the price quote of\r\n                vendor1 is 8200, vendor2 it is 8300, vendor3 it is 6900, and vendor4 it is 9200.\r\n                Similarly m2[ ], m3[ ], and m4 [ ] stores the price quotations of other machines\r\n                for the 4 vendors.\r\n                Now the goal is to assign one machine to each vendor so that all tasks are\r\n                completed with the smallest total cost. In order to do this, you have to consider\r\n                all possible combinations of machines and vendors, and find the smallest cost\r\n                and the corresponding combination of machine and vendor. Note that each\r\n                vendor will be assigned exactly one machine.\r\n                Your program should output the total cost, as well as the assigned vendors\r\n                to the machines. You may initialize the arrays m1, m2, m3, and m4 in the code\r\n                (no need to take user input).\r\n                Example:\r\n                Input:\r\n                m1 \u2192 8200, 8300, 6900, 9200\r\n                m2 \u2192 7700, 3700, 4900, 9200\r\n                m3 \u2192 1100, 6900, 500, 8600\r\n                m4 \u2192 800, 900, 9800, 2300\r\n                Output:\r\n                Total cost = 14000\r\n                Machine1 - Vendor3\r\n                Machine2 - Vendor2\r\n                Machine3 - Vendor1\r\n                Machine4 - Vendor4",
                    "Answer":"#include <stdio.h>\r\n            #include <stdlib.h>\r\n            \r\n            int main()\r\n            {\r\n                int arr[24][4]={\r\n            {1,2,3,4},\r\n            {1,2,4,3},\r\n            {1,3,2,4},\r\n            {1,3,4,2},\r\n            {1,4,2,3},\r\n            {1,4,3,2},\r\n            {2,1,3,4},\r\n            {2,1,4,3},\r\n            {2,3,1,4},\r\n            {2,3,4,1},\r\n            {2,4,1,3},\r\n            {2,4,3,1},\r\n            {3,1,2,4},\r\n            {3,1,4,2},\r\n            {3,2,1,4},\r\n            {3,2,4,1},\r\n            {3,4,1,2},\r\n            {3,4,2,1},\r\n            {4,1,2,3},\r\n            {4,1,3,2},\r\n            {4,2,1,3},\r\n            {4,2,3,1},\r\n            {4,3,1,2},\r\n            {4,3,2,1}};\r\n            \r\n            int m[4][4]={\r\n            {8200, 8300, 6900, 9200},\r\n            {7700, 3700, 4900, 9200},\r\n            {1100, 6900, 500, 8600},\r\n            {800, 900, 9800, 2300}\r\n            };\r\n            \r\n            int cost[16] = { 0 };\r\n            \r\n            \r\n            for(int i=0;i<16;i++){\r\n                cost[i]+=m[arr[i][0]-1][0];\r\n                cost[i]+=m[arr[i][1]-1][1];\r\n                cost[i]+=m[arr[i][2]-1][2];\r\n                cost[i]+=m[arr[i][3]-1][3];\r\n            \r\n            }\r\n            int ind;\r\n            for(int j=0;j<16;j++){\r\n            \r\n                    int flag=0;\r\n                for(int k=0;k<16;k++){\r\n                    if(cost[j]<=cost[k]){\r\n                        flag++;\r\n                    }\r\n                }\r\n                if(flag==16){\r\n                    ind = j;\r\n                }\r\n            }\r\n            printf(\"Total cost is : %d\\n\",cost[ind]);\r\n            printf(\"vendor 1 repairs machine %d \\n vendor 2 repairs machine %d \\n vendor 3 repairs machine %d \\n vendor 4 repairs machine %d\",arr[ind][0],arr[ind][1],arr[ind][2],arr[ind][3]);\r\n            \r\n            \r\n                return 0;\r\n            }"
                },
                {
                    "Question": "Write a C program which does the following:\r\n- Take an integer n as the input from the user\r\n- The program then keeps on reading floating-point numbers from the\r\nuser until the input value is within -1 < x < +1; this value is assigned\r\nto a floating-point variable x\r\nThen the program keeps on reading another set of floating-point\r\nnumbers from the user until the input value is within -0.5 < a < 0.5;\r\nthis value is assigned to a floating-point variable a.\n\nNow compute the followings:\r\nsin(x) with the value of x up to n terms. Print the value of sin(x)\r\nsin(a) up to k terms such that the result is accurate up to 10-4 approximation.\r\nThis indicates that the value of sin(a) remains same up to the 4 decimal\r\nposition for k and (k+1) terms. Print the value of sin(a) and k (the number of\r\nterms) to achieve that value.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main(int argc, char const *argv[])\r\n{\r\n    int n, check = 1, check2 = 1;\r\n    float x, a, sinx = 0;\r\n    printf(\"enter the no. of terms :\");\r\n    scanf(\"%d\", &n);\r\n\r\n    while (check == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -1 to 1\\n\");\r\n        scanf(\"%f\", &x);\r\n        if (x < 1 && x > (-1))\r\n        {\r\n            check = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n    while (check2 == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -0.5 to 0.5\\n\");\r\n        scanf(\"%f\", &a);\r\n        if (a < .5 && a > (-.5))\r\n        {\r\n            check2 = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n\r\n    \/\/ part 2\r\n    \/\/ sinx calculation\r\n\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n\r\n        float fac = 1.0;\r\n        for (int j = 1; j <= (2 * i - 1); j++)\r\n        {\r\n            fac = fac * j;\r\n        }\r\n        if (i % 2 == 0)\r\n        {\r\n            sinx -= x \/ fac;\r\n        }\r\n        else\r\n        {\r\n            sinx += x \/ fac;\r\n        }\r\n        x *= x * x;\r\n    }\r\n    printf(\"sinx = %f\", sinx);\r\n\r\n    \/\/ sin(a) calculations\r\n    int k = 1;\r\n    while (1)\r\n    {\r\n\r\n        float y = a, z = a;\r\n        float sina = 0, sinb = 0, sinat, sinbt;\r\n        for (int i = 1; i <= k; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sina -= y \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sina += y \/ fac;\r\n            }\r\n            y *= y * y;\r\n        }\r\n        for (int i = 1; i <= k + 1; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sinb -= z \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sinb += z \/ fac;\r\n            }\r\n            z *= z * z;\r\n        }\r\n        sinat = sina * 10000;\r\n        int sa = (int)sinat;\r\n        sinbt = sinb * 10000;\r\n        int sb = (int)sinbt;\r\n        if (sa == sb)\r\n        {\r\n            printf(\"\\nsina = %0.4f\\nk=%d\", sina, k);\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            ++k;\r\n            continue;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program that will read in a set of at most 10 positive integers. However, if an integer 0 or less is read\r\nsomewhere, then that means that no more integers are to be read. Now among the positive integers read, find out if\r\nthe sum of those which are divisible by either 2 or 3 or 5 is greater than the sum of those which are not divisible by\r\nany one of 2 or 3 or 5, or whether the two sums are equal. (Loop CAN be used and will help to write a shorter program,\r\nthough it is not absolutely necessary to use loops. Arrays are NOT to be used) \r\nSave the file as A04_<Roll Number>.c (example A04_21AG10002.c). Build, Run for and test it for the given data. Then \r\nupload the .c file for the Assignment. \r\nIn particular, you will do the following:\r\n1. Read in integers one by one and print them till either you read 10 positive numbers or read a 0 or negative\r\nnumber. (Print only the positive numbers). Create a new line after they are printed.\r\n2.\r\nIn a new line, Print the sum (Sum1) of numbers divisible by any one of 2 or 3 or 5 as \u2013 Sum1 (Divisible) = <Value>\r\n3.\r\nIn a new line, Print the sum (Sum2) of numbers not divisible by any of 2 or 3 or 5 as \u2013 Sum2 (Not Divisible) =\r\n<Value>\r\n4.\r\nIn a new line, Print which sum is larger or whether they are equal. \r\nTest Data: (Inputs will be given one after another without commas)\r\na) 2    3    5    7    15    11    7    0\r\nb) 8   12    23    17   19    18    -4\r\nc) 11   23   18    16    29    31   9   12    16    7 ",
                    "Answer" : "\r\n#include <stdio.h>\r\nmain()\r\n{\r\n   int num,sum1=0,sum2=0,i;\r\n   for(i=1;i<=10;i++)\r\n   {\r\n       \/*receiving numbers*\/\r\n       printf(\"Enter a no:\\n\");\r\n       scanf(\"%d\",&num);\r\n       if (num>0)\r\n       {\r\n           printf(\"No entered:%d \\n\",num);\r\n           \/*nos divisible by 2,3,5*\/\r\n           if (num%2==0 || num%3==0 || num%5==0)\r\n           {\r\n               sum1=sum1+num;\r\n           }\r\n           \/*nos not divisible by 2,3,5*\/\r\n           else if(num%2!=0 && num%3!=0 && num%5!=0)\r\n           {\r\n               sum2=sum2+num;\r\n           }\r\n       }\r\n\r\n       else break;\r\n\r\n   }\r\n   \/*Printing the details*\/\r\n   printf(\"  \\n\");\r\n   printf(\"\\nSum1(divisible)=%d \\n\",sum1);\r\n   printf(\"  \\n\");\r\n   printf(\"\\nSum2(Not divisible)=%d \\n\",sum2);\r\n   printf(\"  \\n\");\r\n   if (sum1==sum2)\r\n   {\r\n       printf(\"BOTH SUMS ARE EQUAL\");\r\n\r\n   }\r\n   else if (sum1>sum2)\r\n   {\r\n       printf(\"SUM 1(DIVISIBLE) is larger\");\r\n   }\r\n   else printf(\"SUM 2(NOT DIVISIBLE) is larger\");\r\n   printf(\"  \\n\");\r\n\r\n}"
                },
                {
                    "Question": "Write a C Program to evaluate the series\r\nf(x) = 1 - 2x\/1! + 3x\r\n2\r\n\/2! - 4x\r\n3\r\n\/3! + 5x\r\n4\r\n\/4!\r\n-\r\n\u2026.\r\nfor 0 < x \u2264 1 (x is a floating point number)\r\nup to a given integer number n (n > 0) of terms.\r\nSave the file as A05_<Roll Number>.c (example A05_21AG10002.c). Build, Run for and test it for the given data\r\nas well as your own data. Then upload the .c file for the Assignment.\r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in the value of x and an integer n and print them in a single line depicting which is x and which is n\r\n2.\r\nIf  any one of the values entered is invalid, that is, either x does not satisfy 0 < x \u2264 1, or n is \u2264 0, print a\r\nmessage saying invalid input and ask the user to enter BOTH the values again, and read the values again\r\n(must use a while loop) and print them\r\n3. Continue the above two steps until values entered satisfy both 0 < x \u2264 1 and n is positive\r\n4. Now compute the value of f(x) up to n terms. Print the interim values of sum and term in every iteration\r\ninside the loop and then the final values at the end. Do not use any mathematical function like pow, etc.\r\nTest Data: \r\na) 0.6 10\r\nb) 0.97 25\r\nc) 1.3 12\r\nfollowed by       0.5\r\n0     followed by     1.0 20",
                    "Answer": "#include<stdio.h>\r\nmain()\r\n{   float x,sum=0.0,term=1.0,t=1.0;\r\n    int n,i;\r\n    \/*reading values of x and n*\/\r\n    printf(\"Enter a floating point value of x and integer n\\n\");\r\n    scanf(\"%f\",&x);scanf(\"%d\",&n);\r\n    while(x<=0||x>1||n<=0)\r\n    { printf(\"Invalid input\\n\");\r\n      printf(\"Enter a floating point value of x and integer n\\n\");\r\n       scanf(\"%f\",&x);scanf(\"%d\",&n);\r\n    }\r\n    printf(\"Value of x=%f and n=%d\\n\",x,n);\r\n    \/*calculating the series*\/\r\n    for(i=1;i<=n;i++)\r\n    { printf(\"Interim sum=%f and interim term =%f\\n\",sum,term);\r\n      sum+=term;\r\n      t*=-(x\/i);\r\n      term=(i+1)*t;\r\n    }\r\n    printf(\"Final value of sum=%f\\n\",sum);\r\n}"
                },
                {
                    "Question": "Write a C Program that reads in a positive integer n, n > 100, and then finds all three digit numbers formed by\r\nconsecutive digits of n. It then finds the largest prime number among these three digit numbers and prints it. \nIt prints\u201CNone is Prime\u201D if no such primes exist.\r\nFor example, if the number read is 5713271 then the program will print 571, 713, 132, 327, 271  and then say that the\r\nlargest prime among them is 571.  Again if the number read is 668844 then it prints  668, 688, 884, 844 and then prints\r\n\u201CNone is Prime\u201D\r\nSave the file as A06_<Roll Number>.c (example A06_21AG10002.c). Build, Run for and test it for the given data. Then\r\nupload the .c file for the Assignment.\r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in an integer n. (Assume a valid input will be given.) Print it. Create a new line after the print statement.\r\n2. Print all three digit numbers of n as required above, one after another, in the same line, each number followed bya comma. \nAfter that, when all are printed, make a new line.\r\n3. Print the largest primes number among these three digit numbers or state \u201CNone is Prime\u201D. (Write the code for\r\nchecking for primes in the main program itself and do not write a separate function for detection of primes)\r\nTest Data: \r\na) 5713271 \r\nb) 6688441\r\nc) 1122335",
                    "Answer": "#include <stdio.h>\r\n\r\nmain()\r\n{\r\n    int given;\r\n    printf(\"Give a number of 3 digits at least(ie greater than 100)\\n\");\r\n    scanf(\"\\n%d\",&given);\r\n    printf(\"\\n\");\r\n    int num=given;\r\n    printf(\"%d\\n\",given);\r\n    int term;\r\n    int prime;\r\n    int lprime=0;\/\/largest prime\r\n    int i;\r\n    while (num>99)\r\n    {\r\n        term=num%1000;\r\n        prime=1;\r\n        printf(\"%d, \",term);\r\n        for (i=2;i<=term\/2;++i)\r\n        {\r\n            if (term%i==0) prime=0;\r\n        }\r\n        if (prime==1)\r\n        {\r\n            if(term>lprime) lprime=term;\r\n        }\r\n\r\n        num=num\/10;\r\n    }\r\n    if (lprime==0) printf(\"\\nNo prime numbers\");\r\n    else printf(\"\\nLargest prime=%d\", lprime);\r\n}"
                },
                {
                    "Question":"You have \u2018n\u2019 number of balls numbered from 1 through n (1,2,3,.......,n). You are playing a game\r\nwhere you select any two cards each of which has some integer number printed over it. Your\r\ntask is to choose only those balls whose associated numbers are a multiple of either of the two\r\nnumbers printed on the cards that you have selected (i.e any one or both the card numbers).\r\nWrite a program for this. Your input should be three integer numbers, \u2018n\u2019 representing the\r\nnumber of balls and \u2018x\u2019 and \u2018y\u2019, each representing one of the two numbers on the cards that\r\nyou select. Your output should be those balls (i.e the number associated with the balls) that\r\nsatisfy the game criteria. Print \u201CGame Lost\u201D in case no balls can be selected. You can assume\r\nall positive integer values including 1 but excluding 0 for \u2018n\u2019, \u2018x\u2019 and \u2018y\u2019.\r\n\r\nExample 1:\r\nInput:\r\nn = 20\r\nx = 4\r\ny = 7\r\n\r\nOutput:\r\n4\r\n7\r\n12\r\n14\r\n16\r\n20\r\n\r\n[Reason: The numbers on the output balls all satisfy the condition that they are either a multiple of 4 or 7 or both.]",
                    "Answer":"\/* You have \u2018n\u2019 number of balls numbered from 1 through n (1,2,3,.......,n). You are playing a game\r\nwhere you select any two cards each of which has some integer number printed over it. Your\r\ntask is to choose only those balls whose associated numbers are a multiple of either of the two\r\nnumbers printed on the cards that you have selected (i.e any one or both the card numbers).\r\nPrint \u201CGame Lost\u201D in case no balls can be selected. You can assume\r\nall positive integer values including 1 but excluding 0 for \u2018n\u2019, \u2018x\u2019 and \u2018y\u2019.*\/\r\n\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking the number of balls as input\r\n    int n;\r\n    printf(\"enter the number of balls:\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/the number that is printed on the two cards that we have picked are taken as input\r\n    int x,y;\r\n    printf(\"enter the number on the first card:\");\r\n    scanf(\"%d\",&x);\r\n    printf(\"enter the number on the second card:\");\r\n    scanf(\"%d\",&y);\r\n\r\n    \/*in order to check if we can select any ball at all or\r\n    not,we are initializing the count variable which will count the\r\n    number of balls that we can pick.*\/\r\n    int count=0;\r\n\r\n    \/\/finding the ball whose number is either a multiple of x or y\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        \/\/checking if the number on the ball is a multiple of x\r\n        if (i%x==0)\r\n        {\r\n            printf(\"%d \\n\",i);\r\n            count+=1;\r\n        }\r\n\r\n        \/\/checking if the number on the ball is a multiple of y\r\n        else if(i%y==0)\r\n        {\r\n            printf(\"%d \\n\",i);\r\n            count+=1;\r\n        }\r\n    }\r\n\r\n    \/\/if count==0,there are no balls to be selected\r\n    if (count==0)\r\n    {\r\n        printf(\"Game Lost \\n\");\r\n    }\r\n    else\r\n    {\r\n\r\n    }\r\n\r\n}"
                },
                {
                    "Question":"Take input 3 numbers from the keyboard. Find out the number of digits of each of the three\r\nnumbers. Hence find out whether you can construct a triangle whose three sides have length\r\nequal to the number of digits of the three numbers. Also if a triangle is possible, then comment\r\non its type based on the length of its side, i.e whether it is a scalene, isosceles or equilateral\r\ntriangle. You should display i) the number of digits of each of the three numbers that you\r\nhave taken as input, ii) print \u2018Yes\u2019 if you can form a triangle with sides equal to the number of\r\ndigits, \u2018No\u2019 otherwise and iii) display \u2018Equilateral\u2019, \u2018Isosceles\u2019 or \u2018Scalene\u2019 based on the nature of\r\ntriangle, if you can form the triangle, else print \u2018Triangle not possible\u2019. To include more digits\r\nwithin a given number, you can assume \u2018long int\u2019 type data while taking input. You may further\r\nassume that the input numbers will always fall within the range of \u2018long int\u2019.\r\n\r\nExample 1:\r\nInput:\r\n52\r\n286325\r\n74523\r\nOutput:\r\n2\r\n6\r\n5\r\nYes\r\nScalene\r\n[Reason: The first three outputs show the number of digits of the three input numbers. You can\r\nform a triangle with sides 2,6 and 5, which is a scalene triangle.]\r\n\r\nExample 2:\r\nInput:\r\n1\r\n23\r\n7564\r\nOutput:\r\n1\r\n2\r\n4\r\nNo\r\nTriangle not possible",
                    "Answer":"\/\/program to input a number and find the number of digits and check whether a triangle is possible using those numbers\r\n#include <stdio.h>\r\n\/\/declaring i as a global variable\r\nint i;\r\n\/\/defining a funtion calculate to find the number of digits\r\nlong int calculate (long int x)\r\n{\r\n  i = 0;\r\n  while (x > 0)\r\n    {\r\n      x = x \/ 10;\r\n      i++;\r\n    }\r\n  return i;\r\n}\r\n\r\nint main ()\r\n{\r\n  long int a, b, c;\r\n  printf (\"enter the three numbers \\n\");\r\n  \/\/accepting values from the user\r\n  scanf (\"%ld %ld %ld\", &a, &b, &c);\r\n  long int x = calculate (a);\r\n  long int y = calculate (b);\r\n  long int z = calculate (c);\r\n  printf(\"%ld \\n %ld \\n %ld \\n \",x,y,z);\r\n  \/\/checking whether the following triangle is possible or not\r\n  if (x + y > z && y + z > x && z + x > y)\r\n    {\r\n      printf (\"triangle is possible \\n\");\r\n      if (x == y && y == z)\r\n\tprintf (\"equilateral \\n\");\r\n      else if ((x == y && y != z) || (y == z && z != x) || (z == x && x != y))\r\n\tprintf (\"isosceles \\n\");\r\n      else\r\n\tprintf (\"scalene \\n\");\r\n\r\n    }\r\n  else\r\n    printf (\"triangle not possible\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Consider the following series of numbers, 4,8,14,22,32 . . . . This series follows a specific pattern.\r\nFind out the pattern. Hence take a number \u2018k\u2019 as input and print the first k terms of the series\r\naccording to the rules of the pattern. Also take another integer \u2018n\u2019 as input and print the\r\ndifference between the (n+1)\u2019th term and the n\u2019th term of the series. You must write the\r\nlogic of the pattern as well as the general formula for its n\u2019th term as comments\r\nbelow your code. You can assume that n starts from 1.",
                    "Answer":"\/*Consider the following series of numbers, 4,8,14,22,32 . . . . This series follows a specific pattern.\r\nFind out the pattern. Hence take a number \u2018k\u2019 as input and print the first k terms of the series\r\naccording to the rules of the pattern. Also take another integer \u2018n\u2019 as input and print the\r\ndifference between the (n+1)\u2019th term and the n\u2019th term of the series*\/\r\n\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking k as input\r\n    int k;\r\n    printf(\"enter the value of k:\");\r\n    scanf(\"%d\",&k);\r\n\r\n    \/*IMPORTANT OBSERVATION:IF WE LOOK AT THE DIFFERENCE BETWEEN THE SUCCESIVE TERMS,THE DIFFERENCES ARE IN AP.\r\n    SINCE IN AN A.P. THE GENERAL TERM IS A LINEAR EXPRESSION IN N,THE GENERAL TERM IN THIS SERIES WILL BE OF THE FORM:\r\n    A*N^2 +B*N+C.AFTER CALCULATING THE VALUE OF A,B AND C, THE GENERAL TERM(NTH TERM IS)=(N^2 +N +2) *\/\r\n\r\n    \/\/printing the first k terms as input\r\n    for (int i=1;i<=k;i++)\r\n    {\r\n        int j=(i*i+i+2);\r\n        printf(\"%d \\n\",j);\r\n    }\r\n\r\n    \/\/taking n as input\r\n    int n;\r\n    printf(\"enter the value of n as input:\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/to find the difference between the nth and (n+1)th term of the series\r\n    int ta=n*n+n+2;\r\n    int tb=(n+1)*(n+1)+(n+1)+2;\r\n    int dif=tb-ta;\r\n    printf(\"the difference between the %dth and %dth term is:%d\",n,(n+1),dif);\r\n\r\n}"
                },
                {
                    "Question":"Consider the infinite summation formula for calculating the value of \u2018x\u2019 as given below. Take\r\ntwo integer numbers \u2018n\u2019 and \u2018k\u2019 as inputs. Find out the value of \u2018x\u2019 by summing the first \u2018n\u2019\r\nterms according to the formula correct to three decimal places. Hence, multiply the value of x\r\nwith \u2018k\u2019 and consider the floor of the result, i.e the integer value immediately lower than the\r\nmultiplication value, and check whether the floor value is a prime number or not. You have to\r\ndisplay the value of \u2018x\u2019 correct up to three decimal places and print \u2018Prime\u2019 or \u2018Not prime\u2019 based\r\non the primality of floor(x*k). You can calculate the floor value by any way you feel like. Also\r\nmake sure to take appropriate variable data types. Read the question clearly, you will get all\r\nthe necessary details about data types.\r\n\r\nx =\r\n(1 \u00D7 2)3\r\n((1 \u00D7 2)(1 + 2))2 +\r\n\r\n(2 \u00D7 3)3\r\n((2 \u00D7 3)(2 + 3))2 +\r\n\r\n(3 \u00D7 4)3\r\n((3 \u00D7 4)(3 + 4))2 + \u00B7 \u00B7 \u00B7 (1)\r\n\r\nExample 1:\r\nInput:\r\nn=2\r\nk=677\r\nOutput:\r\n0.462\r\nNot prime\r\n[Reason: As n=2, the value of \u2018x\u2019 as per the given formula considering only the first two terms\r\ncorrect upto three decimal places is 0.462. Now 0.462 x k=0.462 x 677=312.774. Consider the\r\nfloor of the answer, i.e 312, which is not a prime number.]",
                    "Answer":"\/*program to find the sum of infinite series and multiplying\r\nthe sum with k with a random number k and checking whether it is\r\na prime number or not*\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n    \/\/varible declaration\r\n    int n,k,c=0,p, FLAG=1,i;\r\n    float x=0.0,d=0.0;\r\n\r\n    \/\/taking input from the user\r\n    printf(\"INPUT:\\n\");\r\n    printf(\"n=\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"k=\");\r\n    scanf(\"%d\",&k);\r\n\r\n    \/\/calculation of the sum of series and printing it\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        d=(i*(i+1))*(i+(i+1));\r\n        x=x+(pow((i*(i+1)),3))\/(pow(d,2));\r\n    }\r\n    printf(\"\\nOUTPUT:\\n\");\r\n    printf(\"%0.3f\\n\",x);\r\n\r\n    x = floorf(x * 1000) \/ 1000;\r\n    printf(\"%0.3f*k=%0.3f\\n\",x,(x*k));\r\n    \/\/to multiply and round of the value\r\n\r\n    p=floor(x*k);\r\n    printf(\"Floor(%0.3f)=%d\\n\",(x*k),p);\r\n    \/\/checking for prime number and printing the same\r\n    for(i=2;i<=sqrt(p);i++)\r\n   {\r\n      if(p%i == 0)\r\n      {\r\n         FLAG = 0;\r\n         break;\r\n      }\r\n   }\r\n   if(FLAG == 1)\r\n      printf(\"Prime Number\",p);\r\n   else\r\n      printf(\"Not Prime\",p);\r\n\r\n    return 0;\r\n\r\n    \/\/program completed\r\n}"
                },
                {
                    "Question":"Write a program to perform the following tasks,\r\n(A) Take input two positive integer numbers \u2018n\u2019 and \u2018k\u2019.\r\n(B) Hence successively keep on taking positive integer numbers as input until you encounter\r\n\u2018k\u2019 multiples of \u2018n\u2019, i.e all the various different multiples of \u2018n\u2019 appearing for a total of \u2018k\u2019\r\ntimes in the input stream.\r\n(C) Find out the maximum and the minimum among those \u2018k\u2019 multiples of \u2018n\u2019 and display\r\nthem.\r\nYou have to use a do-while loop for this question and cannot use arrays. Do not\r\nconsider 0 or negative numbers as inputs anywhere.\r\nInitial Input:\r\nn=5\r\nk=3\r\nSuccessive Inputs:\r\n34\r\n23\r\n25\r\n78\r\n100\r\n32\r\n11\r\n85\r\n(STOP HERE, NO MORE INPUT)\r\nOutput:\r\nMaximum multiple: 100\r\nMinimum multiple: 25\r\n[Reason: As n=5 and k=3, you would need to stop taking successive integers as input once you\r\nencounter any 3 multiples of 5. In the given input stream, the 3 multiples of 5 are 25, 100 and\r\n85, in that order. You stop taking further input once you encounter a total of 3 multiples of 5,\r\ni.e 85 in this case. Among the three multiples, 25, 100 and 85, 25 is the minimum and 100 is\r\nthe maximum]",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/ Variable Declaration\r\n    \/\/ count : To keep track of number of multiples of n; num : To store user inputed numbers\r\n    \/\/ max : To store maximum multiple of n; min : To store minimum multiple of n\r\n    int n, k, count = 0, num, max = 0, min;\r\n\r\n    \/\/ Prompting user for input and accepting input.\r\n    printf(\"Enter 2 positive integers (n & k).\\n\");\r\n    scanf(\"%d%d\", &n, &k);\r\n\r\n    min = 2000000000;\r\n\r\n    \/\/ Loops continues until k multiples of n have been entered\r\n    do\r\n    {\r\n        \/\/ Prompting user for input and accepting input\r\n        printf(\"Enter another positive integer.\\n\");\r\n        scanf(\"%d\",&num);\r\n\r\n        \/\/ If num is not a multiple of n, it skips all succeeding statements and goes to next iteration.\r\n        if (num % n != 0)\r\n            continue;\r\n\r\n        \/\/ If num is greater than max, num replaces max\r\n        max = (max < num) ? num : max;\r\n        \/\/ If num is less than min, num replaces min\r\n        min = (min > num) ? num : min;\r\n\r\n        \/\/ If num is a multiple of n, it doesn't enter if condition (continue statement) and reaches this statement for increasing count of number of multiples of n.\r\n        count++;\r\n    }\r\n    while(count < k);\r\n\r\n    \/\/ Printing output for user.\r\n    printf(\"\\nMaximum multiple of (n) %d is %d\", n, max);\r\n    printf(\"\\nMinimum multiple of (n) %d is %d\", n, min);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to read an integer n, and then print the value of factorial n \r\n(i.e., n!). Assume that n < 10. For example, if n = 5, then the program should print \r\n120.",
                    "Answer": "#include<stdio.h>\r\n\r\n\/\/it is given that n will not be greater than 10\r\n\r\nint main()\r\n{\r\n    int n,i,fact;\r\n    \/\/scanning value of n\r\n    printf(\"Please enter n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    fact=1;\r\n\r\n    \/\/loop for calculating factorial\r\n    for(i=2;i<=n;++i)\r\n    {\r\n        fact=fact*i;\r\n    }\r\n\r\n    \/\/printing value of factorial\r\n    printf(\"The factorial of %d is: \\t%d\\n\",n,fact);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads an integer n and then prints the sum of digits of n. \r\nFor example, if n is 2020 it should print 4.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    int n,i,sum;\r\n    sum=0;\r\n\r\n    \/\/scanning value of n\r\n    printf(\"Please enter n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    i=n;        \/\/copying value of n to i so that we can conserve the value of n\r\n\r\n    \/\/loop for finding sum of digits\r\n    while(i>0)\r\n    {\r\n        sum=sum+i%10;  \/\/extracting last digit of n\r\n        i=i\/10;\r\n    }\r\n    printf(\"The sum of digits of %d is:\\t%d\\n\",n,sum);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Cosine function can be expressed as the following infinite series form:\r\n cosine(x) = 1 - (1\/2!)x2 + (1\/4!)x4\r\n- (1\/6!)x6+\u2026..\r\nWrite a C program which shall take a floating-point variable x and evaluate the \r\nabove cosine series to the 5th term of the series and print the approximate value \r\nof cosine(x). Do not call the factorial function.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    float x;\r\n    double sum, term;\r\n    int i;\r\n    int k=5; \/\/value of k can be any natural number. it is 5 for the sake of assignment.\r\n\r\n    \/\/scanning value of x\r\n    printf(\"Please enter x:\\n\");\r\n    scanf(\"%f\",&x);\r\n\r\n    \/\/loop for finding value of cosine\r\n    for(i=1,sum=1,term=1;i<k;++i)\r\n    {\r\n        term*=-1*x*x\/(2*i*(2*i-1));\r\n        sum+=term;\r\n    }\r\n\r\n    printf(\"The sum of cosine series upto 5 terms is:\\t%lf\\n\",sum);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program which reads the month number of a leap year as an integer m. \r\nWith January as 1, and December as 12. The program should then print the \r\nnumber of days in the month. Use the case-switch statement.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int m;\r\n    printf(\"Enter the number of month: \");\r\n    scanf(\"%d\",&m);     \/\/reading integer m\r\n\r\n    switch(m)\r\n    {\r\n        case 1: printf(\"There are 31 days in January.\\n\");\r\n                break;\r\n        case 2: printf(\"There are 29 days in February.\\n\");     \/\/it is given that months are from a leap year.\r\n                break;\r\n        case 3: printf(\"There are 31 days in March.\\n\");\r\n                break;\r\n        case 4: printf(\"There are 30 days in April.\\n\");\r\n                break;\r\n        case 5: printf(\"There are 31 days in May.\\n\");\r\n                break;\r\n        case 6: printf(\"There are 30 days in June.\\n\");\r\n                break;\r\n        case 7: printf(\"There are 31 days in July.\\n\");\r\n                break;\r\n        case 8: printf(\"There are 31 days in August.\\n\");\r\n                break;\r\n        case 9: printf(\"There are 30 days in September.\\n\");\r\n                break;\r\n        case 10: printf(\"There are 31 days in October.\\n\");\r\n                break;\r\n        case 11: printf(\"There are 30 days in November.\\n\");\r\n                break;\r\n        case 12: printf(\"There are 31 days in December.\\n\");\r\n                break;\r\n        default: printf(\"Not a valid month number.\\n\");         \/\/if any input other than 1-12 is given, then an error message is displayed\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "A Ramanujan number is a positive integer that is expressible as the sum of two \r\ncubes in two different ways. Write a program that takes an integer n as input and \r\nprints all integers less than or equal to n that can be expressed as the sum of two \r\ncubes in two different ways, i.e., find distinct positive integers a, b, c, and d such \r\nthat a3 + b3 = c3 + d3 <= n. Use four nested for loops. The smallest Ramanujan \r\nnumber is 1729, since 103 + 93 = 123 + 13 = 1729. (Please read the 3's as cubes)",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n,a,b;  \/\/a and b are integers, sum of whose cubes wil be calculated\r\n    int count;  \/\/count is the number of ways in which i can be represented as sum of two cubes\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    for(int i=1;i<=n;i++)       \/\/loop for iterating all integers till n\r\n    {\r\n        count=0;\r\n\r\n        for(a=1;(a*a*a)<i;a++)\r\n        {\r\n            for(b=a+1;(a*a*a+b*b*b)<=i;b++) \/\/b starts from a+1 so as to avoid repetition\r\n            {\r\n                if((a*a*a+b*b*b)==i)      \/\/checking condition for ramanujan number\r\n                {\r\n                  count++;\r\n                }\r\n            }\r\n        }\r\n        if(count==2)\r\n        {\r\n            printf(\"%d is a Ramanujan number.\\n\",i);\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program that reads an integer N and prints a (2N + 1)-by-(2N + 1) \r\ndiamond like the one below. \r\n. . . . * . . . . \r\n. . . * * * . . . \r\n. . * * * * * . . \r\n. * * * * * * * . \r\n* * * * * * * * * \r\n. * * * * * * * . \r\n. . * * * * * . . \r\n. . . * * * . . . \r\n. . . . * . . . .",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);     \/\/reading integer n\r\n\r\n    \/\/loop for upper half of diamond\r\n    for(int row=0;row<n+1;row++)\r\n    {\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots before stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        for(int stars=0;stars<2*row+1;stars++)  \/\/loop for printing stars\r\n        {\r\n            printf(\"*\");\r\n        }\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots after stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    \/\/loop for lower half of diamond\r\n    for(int row=n-1;row>=0;row--)\r\n    {\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots before stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        for(int stars=0;stars<2*row+1;stars++)  \/\/loop for printing stars\r\n        {\r\n            printf(\"*\");\r\n        }\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots after stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read the value of an integer number N, and compute\r\nthe sum S.\r\nS = 1 +1\/2+ 2\/3 + 3\/4 +4\/5+ 5\/6 + ... to N terms\r\nNote that the sum S must be a floating-point number\r\n(float or double). Provide outputs for N=5, 10, 15 and 20.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    float term=1;\r\n    float sum=0;\r\n\r\n    for(int count=1;count<=n;count++){\r\n        sum+=term;\r\n        term=(float)count\/(count+1);\r\n    }\r\n\r\n    printf(\"The sum is: %.2f\\n\",sum);\r\n    printf(\"\\n\");\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question":"Write a program, which reads an integer N and prints N\r\nrows in the form of triangle with \u2018*\u2019 in the following\r\nmanner (shown for N=10) , such that i th row (i=1,2, ..N)\r\nprints i \u2018*\u2019 consecutively.\r\n*\r\n**\r\n***\r\n****\r\n*****\r\n******\r\n*******\r\n********\r\n*********\r\n**********\r\n\r\nProvide outputs for N=6, and 15.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    for(int i=1;i<=n;i++){\r\n        for(int j=1;j<=i;j++){\r\n            printf(\"*\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a program that reads an integer N, and prints the\r\nsum of prime numbers, which are less than N. Compute\r\nthe values for N=2, 4, 8, 16, 32, 64 and 128, and provide\r\nthe result in a separate output file (named result.txt).\r\nUse standard output redirection feature to generate the\r\noutput file.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    int sum=0;\r\n\r\n    for(int i=2;i<n;i++){\r\n        int j;\r\n        for(j=2;j<i;j++){\r\n            if(i%j==0){\r\n                break;\r\n            }\r\n        }\r\n        if(j==i){\r\n            sum+=i;\r\n        }\r\n    }\r\n\r\n    printf(\"The sum of all prime numbers less than %d = %d\\n\\n\",n,sum);\r\n\r\n    return 0;\r\n}"
                }    ]}
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is printed by the following program when the input N is the number formed by the last two \r\ndigits of your roll number? Explain the execution.\r\n\r\n#include <stdio.h>\r\nint main() \r\n{\r\n    int i, j, N, count=0;\r\n    scanf(\"%d\", &N);\r\n    printf(\"%d\\n\", N); \r\n    N += 10;\r\n    for (i=0; i< N; i++) \r\n          for (j=i; j>=0; j--) \r\n                count++;\r\n    printf(\"%d\\n\", count); \r\n}",
                    "Answer": "Let N = 22. N+=10 makes N=32. For the for loop the variable i starts from 0.\r\nWhen i = 0, the inner loop j = 0 is initialised and as j>=0, count = count+1 = 1\r\nand j decreases to -1. Again i = 1, j = 1 initialises and the loop runs two times\r\nand count = count + 2. For i=2, j=2 initialises and inner loop runs three times.\r\nThis goes on till i=31 and j=31 and inner loop runs 32 times.\r\nSo count = 0+1+...+32 = 528\r\n\r\nOutput:\r\n22\r\n528"
                },
                {
                    "Question": "Write a C program which reads a sequence of positive integers till the user types -1. \nIt counts the lengths of the non-decreasing sub-sequences, and prints the maximum among them. \nFor example, for a given input {6, 7, 2, 29, 17, 5, 5, 11, 6, 7, 8, -1), the non-decreasing sub sequences are: \n{6,7}, {2, 29}, {17}, {5, 5, 11} and {6, 7, 8]. Thus, the answer should be 3. \nDo not use an array. Assume that the first integer read is not - 1 and a single integer is a sequence of length 1",
                    "Answer": "#include <stdio.h>\r\n\r\nint main(){\r\n    int prevno, curno, curlength, maxlength;\r\n    scanf(\"%d\",&prevno);\r\n    scanf(\"%d\",&curno);\r\n    curlength = maxlength = 1;\r\n    while(curno!=-1){\r\n        if(curno>=prevno){\r\n            curlength++;\r\n        }else{\r\n            if(curlength>maxlength){\r\n                maxlength = curlength;\r\n            }\r\n            curlength = 1;\r\n        }\r\n        prevno = curno;\r\n        scanf(\"%d\",&curno);\r\n    }\r\n    if(curlength>maxlength){\r\n        maxlength = curlength;\r\n    }\r\n    printf(\"Maximum length is %d\\n\",maxlength);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"We are given eight integers in the input to a C program, out of which all except a single one is distinct. \nWe wish to print the value of the unique distinct integer and also determine the variable in the input order\n corresponding to the distinct value. Use a single scanf statement to read all the eight integers, \nsay, a, b, c, d, e.f, g and h. Do not use arrays. \nFor example, if the sequence is 1 1 1 1 1 2 1 1 then we must print that 2 is the unique distinct value\r\n",
                    "Answer":
                    "#include<stdio.h>\r\nint main() {\r\n    int a,b,c,d,e,f,g,h;\r\n    scanf(\"%d %d %d %d %d %d %d %d\", &a, &b, &c, &d, &e, &f, &g, &h );\r\n    if (a+b==c+d) {\r\n        if (e==f) {\r\n            if (e==g) printf (\"8th number (%d) is distinct\\n\",h);\r\n            else printf(\"7th number (%d) is distinct\\n\",g);\r\n        }\r\n        else {\r\n            if (e==g) printf (\"6th number (%d) is distinct\\n\",f);\r\n            else printf(\"5th number (%d) is distinct\\n\",e);\r\n        }\r\n    }\r\n    else {\r\n        if (a==b) {\r\n            if (c==a) printf (\"4th number (%d) is distinct\\n\",d);\r\n            else printf(\"3rd number (%d) is distinct\\n\",c);\r\n        }\r\n        else {\r\n            if (a==c) printf (\"2nd number (%d) is distinct\\n\",b);\r\n            else printf(\"1st number (%d) is distinct\\n\",a);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"Write a C program to read in a positive integer n and find the digit \nwhich occurs the maximum number of times in n along with its frequency. \nFor example, if the input is 567755, then the answer is 5 and its frequency is 3. \nDo not use arrays or any library functions other than standard input and output. \nThere should be only one main function and no other functions defined by you.\r\n",
                    "Answer":
                    "#include<stdio.h>\r\nmain()\r\n{\r\n    int m, n, maxdigit, maxfreq, tempfreq, i, j;\r\n    scanf(\"%d\", &n);\r\n    printf(\"n = %d \\n\", n);\r\n    maxdigit = -1;\r\n    maxfreq = 0;\r\n    for (i = 0; i < 10; i++)\r\n    {\r\n        m = n;\r\n        tempfreq = 0;\r\n        while (m > 0)\r\n        {\r\n            if (m%10 == i) tempfreq++;\r\n            m = m\/10;\r\n        }\r\n        if (tempfreq > maxfreq)\r\n        {\r\n            maxfreq = tempfreq;\r\n            maxdigit = i;\r\n        }\r\n    }\r\n    printf(\"Digit %d has maximum frequency of %d \\n\", maxdigit, maxfreq);\r\n}\r\n"
                },
                {
                    "Question":"Write a program which reads a list of 10 numbers in ascending order. It then prints the \npairs of consecutive numbers having maximum and minimum differences respectively. \nYour program should have only one main() function and no other functions\r\n",
                    "Answer":
                    "#include <stdio.h>\r\nint main(){\r\n    int i, diff, maxdiff = 0, mindiff, k1, k2, mink1, mink2, maxk1, maxk2;\r\n    scanf(\"%d\", &k1);\r\n    scanf(\"%d\", &k2);\r\n    mindiff = diff = k2 - k1;\r\n    maxk1 = mink1 = k1;\r\n    maxk2 = mink2 = k2;\r\n    for(i=2; i<10; i++){\r\n        k1 = k2;\r\n        scanf(\"%d\", &k2);\r\n        diff = k2 - k1;\r\n        if(diff < mindiff){\r\n            mindiff = diff;\r\n            mink1 = k1;\r\n            mink2 = k2;\r\n        }\r\n        if(diff > maxdiff){\r\n            maxdiff = diff;\r\n            maxk1 = k1;\r\n            maxk2 = k2;\r\n        }\r\n    }\r\n    printf(\"Pair with minimum difference: %d %d\\n\", mink1, mink2);\r\n    printf(\"Pair with maximum difference: %d %d\\n\", maxk1, maxk2);\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "A number is an Armstrong number,if the sum of the cubes of its digits is equal to the number\r\nitself.For example,157=13 +53+73 and 371=3\u00B3+73+1\u00B3,etc. are Armstrong numbers.\r\nThe following program is intended to determine whether an input numbernis an Armstrong\r\nnumber.Fill the blanks to complete the statements so that it does the job.Explain the\r\nstatements you add.\r\nint main(){\r\n intn,temp,x,sum;\r\n scanf(\"%d\",&n);\r\n temp=n;\r\n while(n>0){\r\n  X\r\n   sum+=\r\n                           (A)\r\n                           (B)\r\n                           (C)n=\r\n }\r\n (temp == sum)?printf(\"Yes\"):printf(\"No\");\r\n return0;\r\n}",
                    "Answer": "a) x = n%10\r\nThis statement stores the left-most digit of n in variable x\r\nb) sum += x*x*x;\r\nSince we need to see if the numbers  is the sum of cubes of digits, we need to increment sum by x*x*x, that is x^3.\r\n\r\nAlso, this means sum  has to be initialised to 0. so first line should be   int n, temp,x,sum=0;\r\nc) n = n\/10;\r\nThis statement would divide n by 10 and return an integer value (i.e. floor division), thus removing the digit already considered in the sum above. This iterates to give sum of cubes of digits."
                },
                {
                    "Question":"We need to sort in non-decreasing order), an input unsorted array A of n integers \nwhere n is a power of 2. First we compare n\/2 mutually disjoint (consecutive pairs), \nand set cach such pair in right order. \nIf n = 8 and A = 8, 7, 6,5,1,3,2,1} was the input then we have A= {7,8,5,6,3, 1, 1, 2} after the first iteration. \nWe will have exactly k iterations where n = 2. In iteration 2, A will become A = {5,6,7,8,1,2,3,1} \nbecause we will process 1 = n\/2 = 8\/2 pairs of sequences of length two \u2013 \ne.g., {7,8} and {5,6}, to get {5,6,7,8} and {3,1} and {1,2} to get {1,2,3,4} resulting in A= {5,6,7,8,1,2,3,}. \nFinally, in the third iteration, we will merge only one pair of length four sequences {5,6,7,8} and {1,2,3,4} \nto get the sorted A = {1, 2, 3, 4, 5, 6, 7, 8). \nWrite an iterative C program with arrays but no recursive function for doing this job. \nPrint the inputs n and A and the sorted array A. Assume that n < 210.\r\n\r\n",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\/\/ Merges two subarrays of arr[].\r\n\/\/ First subarray is arr[l..m]\r\n\/\/ Second subarray is arr[m+1..r]\r\nvoid merge(int arr[], int l, int m, int r)\r\n{\r\n\tint i, j, k;\r\n\tint n1 = m - l + 1;\r\n\tint n2 = r - m;\r\n\r\n\t\/* create temp arrays *\/\r\n\tint L[n1], R[n2];\r\n\r\n\t\/* Copy data to temp arrays L[] and R[] *\/\r\n\tfor (i = 0; i < n1; i++)\r\n\t\tL[i] = arr[l + i];\r\n\tfor (j = 0; j < n2; j++)\r\n\t\tR[j] = arr[m + 1 + j];\r\n\r\n\t\/* Merge the temp arrays back into arr[l..r]*\/\r\n\ti = 0; \/\/ Initial index of first subarray\r\n\tj = 0; \/\/ Initial index of second subarray\r\n\tk = l; \/\/ Initial index of merged subarray\r\n\twhile (i < n1 && j < n2) {\r\n\t\tif (L[i] <= R[j]) {\r\n\t\t\tarr[k] = L[i];\r\n\t\t\ti++;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tarr[k] = R[j];\r\n\t\t\tj++;\r\n\t\t}\r\n\t\tk++;\r\n\t}\r\n\r\n\t\/* Copy the remaining elements of L[], if there\r\n\tare any *\/\r\n\twhile (i < n1) {\r\n\t\tarr[k] = L[i];\r\n\t\ti++;\r\n\t\tk++;\r\n\t}\r\n\r\n\t\/* Copy the remaining elements of R[], if there\r\n\tare any *\/\r\n\twhile (j < n2) {\r\n\t\tarr[k] = R[j];\r\n\t\tj++;\r\n\t\tk++;\r\n\t}\r\n}\r\n\r\n\/* l is for left index and r is right index of the\r\nsub-array of arr to be sorted *\/\r\nvoid mergeSort(int arr[], int l, int r)\r\n{\r\n\tif (l < r) {\r\n\t\t\/\/ Same as (l+r)\/2, but avoids overflow for\r\n\t\t\/\/ large l and h\r\n\t\tint m = l + (r - l) \/ 2;\r\n\r\n\t\t\/\/ Sort first and second halves\r\n\t\tmergeSort(arr, l, m);\r\n\t\tmergeSort(arr, m + 1, r);\r\n\r\n\t\tmerge(arr, l, m, r);\r\n\t}\r\n}\r\n\r\n\/* UTILITY FUNCTIONS *\/\r\n\/* Function to print an array *\/\r\nvoid printArray(int A[], int size)\r\n{\r\n\tint i;\r\n\tfor (i = 0; i < size; i++)\r\n\t\tprintf(\"%d \", A[i]);\r\n\tprintf(\"\\n\");\r\n}\r\n\r\n\/* Driver code *\/\r\nint main()\r\n{\r\n\tint arr[] = { 12, 11, 13, 5, 6, 7 };\r\n\tint arr_size = sizeof(arr) \/ sizeof(arr[0]);\r\n\r\n\tprintf(\"Given array is \\n\");\r\n\tprintArray(arr, arr_size);\r\n\r\n\tmergeSort(arr, 0, arr_size - 1);\r\n\r\n\tprintf(\"\\nSorted array is \\n\");\r\n\tprintArray(arr, arr_size);\r\n\treturn 0;\r\n}"
                },
                {
                    "Question": "A wordsis calledx-ish if every letter ofxis contained insin some position.  \nWrite a programthat, given two wordssandx(read as strings), detects ifsisx-ish or not.  \nFor example, ifx=“elf”, then the word “tasteful” isx-ish (or elf-ish) whereas \nthe word “malfunction” is not elf-ish.\nAssume that the two input strings will have lengths at most 49.  \nAlso, assume that the inputstrings contain only lowercase letters.  \nYou are not allowed to use any library functions otherthan strlen and standard input/output.  \nYour program should have only themain() function.",
                    "Answer": "null"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question":"Write a C program to perform the following:\r\n(a) Take two binary numbers (as long long int) of equal length as input. You have to check if\r\nthe inputted numbers are binary or not, i.e each digit of both the numbers should be either\r\n1 or 0. Also count the number of bits in both the numbers. Display an error message if\r\nany one of the numbers is not a binary number or the two numbers are not of the same bit\r\nlength, and exit the program.\r\n(b) If both the numbers are valid binary numbers and they are of the same bit length, then,\r\nperform bitwise XOR operation of the two binary numbers from the least significant bit\r\n(i.e the rightmost bit) onwards. Display the bit by bit XOR output on the screen as you\r\n\r\nprocess each bit of the two numbers from right to left. You cannot use any bitwise oper-\r\nators available in the C library.\r\n\r\nNOTE:- The bitwise XOR output that you will display will actually be in the reverse format\r\nof the correct bitwise XOR. That is okay, do not worry. Also you do not need to generate any\r\n\r\nnumber or such for the bitwise XOR operation, simply print \u20181\u2019 or \u20180\u2019 side by side as per the cor-\r\nrect operation. You can assume that the most significant bit of both the input numbers will be 1.\r\n\r\n[ Bitwise XOR rules:\r\n0 XOR 0 = 0\r\n0 XOR 1 = 1\r\n1 XOR 0 = 1\r\n1 XOR 1 = 0 ] [30 Marks]\r\nExample 1:\r\nInput:\r\n10010\r\n11001\r\nOutput:\r\n11010 [Note that this is the reverse of the actual bitwise XOR]\r\nExample 2:\r\nInput:\r\n10010\r\n1101\r\nOutput:\r\nError\r\nExample 3:\r\nInput:\r\n10230\r\n11011\r\nOutput:\r\nError",
                    "Answer":"\/* Take two binary numbers as input.Check if\r\nthe inputted numbers are binary or not.Also count the number of bits in both the numbers.*\/\r\n\r\n\/* If both the numbers are valid binary numbers and they are of the same bit length, then,\r\nperform bitwise XOR operation of the two binary numbers from the least significant bit onwards.*\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/initializing the variables\r\n    long int n1,n2;\r\n\r\n    \/\/taking the numbers as input\r\n    printf(\"enter the binary number1:\");\r\n    scanf(\"%ld\",&n1);\r\n    printf(\"enter the binary number2:\");\r\n    scanf(\"%ld\",&n2);\r\n\r\n    \/*NOTE:IN THE PROCESS OF FINDING THE NUMBER OF DIGITS OF N1 AND N2,\r\n    THE ORIGINAL VALUE OF N1 AND N2 GETS MODIFIED DURING THE UPDATE EXPRESSSION\r\n    OF THE WHILE LOOP.TO ENSURE THAT THE VALUE DOESN'T GETS LOST,I AM COPYING THEIR VALUES\r\n    IN AUXULLARY VARIBALES TEMP1 AND TEMP2*\/\r\n    int temp1=n1;\r\n    int temp2=n2;\r\n\r\n    \/\/count variables are used to count the number of digits\r\n    int count1=0,count2=0;\r\n\r\n    \/\/checking if the number1 is binary and finding its number of digits\r\n    while (n1>0)\r\n    {\r\n        if (n1%10!=0 && n1%10!=1)\r\n        {\r\n            \/\/if there is any digit other than 1 or 0,break the loop\r\n            printf(\"the number1 is not a binary number.\\n\");\r\n            count1=0;\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            \/\/counter is updated\r\n            count1+=1;\r\n        }\r\n        n1=n1\/10;\r\n    }\r\n\r\n    \/\/checking if the number2 is binary and finding its number of digits\r\n    \/\/same process is again repeated\r\n    while (n2>0)\r\n    {\r\n        if (n2%10!=0 && n2%10!=1)\r\n        {\r\n            printf(\"the number2 is not a binary number.\\n\");\r\n            count2=0;\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            count2+=1;\r\n        }\r\n        n2=n2\/10;\r\n    }\r\n\r\n    \/\/checking if the binary numbers are of the same size and printing their size\r\n    \/\/counter==0 means that the numbers are not binary in nature\r\n    if(count1!=0 && count2!=0)\r\n    {\r\n        if (count1==count2)\r\n        {\r\n        printf(\"the numbers are of the same bit.\\n\");\r\n        printf(\"the size of each number is:%d \\n\",count1);\r\n        }\r\n        else\r\n        {\r\n        printf(\"the numbers are not of the same bit.ERROR!\\n\");\r\n        printf(\"the number of digits in number1:%d \\n\",count1);\r\n        printf(\"the number of digits in number2:%d \\n\",count2);\r\n        }\r\n    }\r\n\r\n    \/\/performing the bitwise XOR operation\r\n    \/\/variable t is the result of each bitwise XOR operation\r\n    int t;\r\n\r\n    \/\/we can perform the XOR operation iff both have same number of bits\r\n    if (count1==count2)\r\n    {\r\n        printf(\"the result after XNOR operation is:\");\r\n\r\n        \/\/iterating for both the numbers\r\n        while(temp1>0 && temp2>0)\r\n        {\r\n            \/*XOR IS A BINARY OPEATION.THE OUTPUT DEPENDS\r\n            ON THE VALUE OF EITHER OF THE TWO OPERAND.USING THIS IF ELSE CONSTRUCT\r\n            I AM CHECKING THE VALUE OF THE OPERANDS AND ASSIGNING THE RESULT TO VARIABLE T*\/\r\n\r\n            if(temp1%10==0 && temp2%10==0)\r\n            {\r\n                t=0;\r\n            }\r\n            else if(temp1%10==0 && temp2%10==1)\r\n            {\r\n                t=1;\r\n            }\r\n            else if(temp1%10==1 && temp2%10==0)\r\n            {\r\n                t=1;\r\n            }\r\n            else if(temp1%10==1 && temp2%10==1)\r\n            {\r\n                t=0;\r\n            }\r\n            \/\/printing the results one by one(rightmost bits at first)\r\n            printf(\"%d\",t);\r\n\r\n            \/\/update expression in the while loop\r\n            temp1=temp1\/10;\r\n            temp2=temp2\/10;\r\n        }\r\n    }\r\n}"
                },
                {
                    "Question":"Write a C program to read a sequence of positive integers to detect all possible non-decreasing\r\nsubsequences and print the total number of such non-decreasing subsequences and the length of\r\nthe longest non-decreasing subsequence. Within a series of integer numbers, a non-decreasing\r\nsubsequence is a contiguous sequence of numbers where all are in non-decreasing order. There\r\nmay be more than one non-decreasing subsequence within the entire sequence, your task is to\r\n\r\nprint the total number of such subsequences present and the length of the longest such subse-\r\nquence. You should continuously keep on taking inputs for the sequence until the user enters\r\n\r\nzero or a negative value. Your program must contain only one loop. Both scanning the next\r\ninteger and processing the scanned integer should be done in that loop. Write no functions other\r\nthan main(). Do not use any array.\r\n[Hint:- In order to get the length of longest subsequence, think of a counter variable and how\r\nit is incremented or decremented based on the new input and last input] [30 Marks]\r\nExample:\r\nSuppose you take input the following numbers one by one:-\r\n2, 4, 3, 5, 6, 1, 3, 4, 8, 9, 6, 7, 5, 3, 9, 0 [You stop taking input here]\r\nSo the entire valid sequence is: {2, 4, 3, 5, 6, 1, 3, 4, 8, 9, 6, 7, 5, 3, 9}\r\nList of non-decreasing subsequences: {2, 4}, {3, 5, 6}, {1, 3, 4, 8, 9}, {6,7}, {5},{3, 9}\r\nLongest non-decreasing subsequence: {1, 3, 4, 8, 9}\r\nSo, your output should be,\r\nTotal number of non-decreasing subsequences: 6\r\nLength of the longest non-decreasing subsequence: 5",
                    "Answer":"#include<stdio.h>\r\nint main()\r\n{\r\n    \/*Declaring variables for the number to be accepted, the longest non-decreasing subsequence,\r\n    the length of the current subsequence,the most recent input and the number of non-decreasing subsequences*\/\r\n    int input,longSeq,currentSeq,prevInput,seqNo;\r\n    currentSeq=1;\r\n    \/\/Accepting the value of the first member of the subsequence\r\n    scanf(\"%d\",&input);\r\n    seqNo=0;\r\n    for(longSeq=0;input>0;)\r\n    {\r\n        prevInput = input;\r\n        scanf(\"%d\",&input);\r\n        if(input>=prevInput)\r\n            currentSeq++;\r\n        \/\/Ending the current subsequence and checking if it was the longest\r\n        else\r\n        {\r\n            if(currentSeq>longSeq)\r\n                longSeq=currentSeq;\r\n            currentSeq=1;\r\n        }\r\n        if(currentSeq==1)\r\n            seqNo++;\r\n    }\r\n    printf(\"The number of non-decreasing subsequences is: %d\",seqNo);\r\n    printf(\"\\nThe longest non-decreasing subsequence is: %d\",longSeq);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to take input a number \u2018n\u2019 and print the following pattern as shown,\r\nFor example,for n=3\r\n*******\r\n*  *  *\r\n* * * *\r\n** * **\r\n* * * *\r\n*  *  *\r\n*******\r\n\r\nFor n=4,\r\n*********\r\n*   *   *\r\n*  * *  *\r\n* *   * *\r\n**  *  **\r\n* *  * *\r\n*  * *  *\r\n*   *   *\r\n*********",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/ n : To store size of pattern as required by user\r\n    int n;\r\n\r\n    \/\/ Prompting user for input and storing it in n\r\n    printf (\"Enter a number for the size of pattern you want.\\n\");\r\n    scanf (\"%d\", &n);\r\n    printf(\"\\nThe pattern of size %d :\\n\\n\", n);\r\n\r\n    \/\/ To print the 1st row of stars (top edge of outer square)\r\n    for (int i = 0; i <= 2 * n; i++)\r\n        printf (\"* \");\r\n    printf (\"\\n\");\r\n\r\n    \/\/ looping to print rows 2 to n+1(e.g.5)\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        \/\/ To print the 1st column of stars (left edge of outer square)\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on TOP-LEFT part of pattern OUTSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print TOP-LEFT part of inner square\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on TOP-LEFT part of pattern INSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf ((i + j != 2 * n - 3) ? \"  \" : \"* \"); \/\/ i+j = 2n-3 only for the central point of pattern\r\n\r\n        \/\/ To print triangular blank space on TOP-RIGHT part of pattern INSIDE the inner square\r\n        for (int j = 1; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print TOP-RIGHT part of inner square\r\n        printf ((i != 0) ? \"* \" : \"\"); \/\/ Exception on 2nd row : there is only one star\r\n\r\n        \/\/ To print triangular blank space on TOP-RIGHT part of pattern OUTSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print the last column of stars (right edge of outer square)\r\n        printf (\"*\\n\");\r\n    }\r\n\r\n    \/\/ looping to print rows n+2(e.g.6) to 2n(e.g.8)\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        \/\/ To print the 1st column of stars (left edge of outer square)\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-LEFT part of pattern OUTSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print BOTTOM-LEFT part of inner square\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-LEFT part of pattern INSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-RIGHT part of pattern INSIDE the inner square\r\n        for (int j = n - 2; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print BOTTOM-RIGHT part of inner square\r\n        printf ((i != n - 1) ? \"* \" : \"\"); \/\/ Exception on penultimate row : there is only one star\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-RIGHT part of pattern OUTSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print the last column of stars (right edge of outer square)\r\n        printf (\"*\\n\");\r\n    }\r\n\r\n    \/\/ To print the last row of stars (bottom edge of outer square)\r\n    for (int i = 0; i <= 2 * n; i++)\r\n        printf (\"* \");\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
                }
                
            ]
        }
    ]
}

